Search.setIndex({"docnames": ["auto_examples/arithm_expr_target", "auto_examples/coin_change", "auto_examples/index", "auto_examples/sg_execution_times", "content", "index", "install", "quickstart", "sg_execution_times", "tryalgo/modules", "tryalgo/tryalgo"], "filenames": ["auto_examples/arithm_expr_target.rst", "auto_examples/coin_change.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "content.rst", "index.rst", "install.rst", "quickstart.rst", "sg_execution_times.rst", "tryalgo/modules.rst", "tryalgo/tryalgo.rst"], "titles": ["Countdown", "Coin change", "Gallery of examples", "Computation times", "Content of the library", "Welcome to tryalgo\u2019s documentation!", "Installation", "Quick start", "Computation times", "tryalgo", "tryalgo package"], "terms": {"go": [0, 1], "end": [0, 1, 10], "download": [0, 1, 2, 6], "full": [0, 1, 10], "exampl": [0, 1, 3, 4, 5, 7, 8, 10], "code": [0, 1, 2, 4, 7, 10], "from": [0, 1, 2, 3, 4, 5, 7, 8, 10], "tryalgo": [0, 1, 2, 4, 6, 7], "arithm_expr_target": [0, 3, 4, 8, 9], "import": [0, 1, 4, 7], "25": [0, 10], "50": 0, "75": 0, "100": 0, "3": [0, 1, 4, 7, 10], "6": [0, 1, 7], "952": 0, "return": [0, 4, 7, 10], "see": [0, 4], "our": [0, 1, 4, 7, 10], "blog": [0, 1, 10], "origin": 0, "video": 0, "behind": 0, "thi": [0, 1, 4, 5, 7, 10], "jupyt": [0, 1, 2], "notebook": [0, 1, 2], "ipynb": [0, 1], "python": [0, 1, 2, 4, 5, 6, 10], "sourc": [0, 1, 2, 4, 7, 10], "py": [0, 1, 3, 8, 10], "galleri": [0, 1, 5, 8], "gener": [0, 1, 2, 4, 10], "sphinx": [0, 1, 2], "coin_chang": [1, 3, 7, 8, 9, 10], "subsetsum": [1, 4, 9], "print": [1, 4, 7, 10], "5": [1, 7], "11": [1, 7, 10], "29": [1, 7], "true": [1, 7, 10], "becaus": [1, 7], "x": [1, 4, 10], "0": [1, 3, 4, 7, 8, 10], "1": [1, 4, 7, 10], "an": [1, 4, 7, 10], "explan": [1, 5, 10], "i": [1, 4, 7, 10], "given": [1, 4, 10], "french": [1, 4], "org": 1, "cl\u00e9menc": 1, "r\u00e9da": 1, "rendu": 1, "de": [1, 5, 10], "monnai": 1, "base": [1, 4, 10], "programm": [1, 5], "dynamiqu": 1, "here": [2, 4, 7, 10], "ar": [2, 4, 5, 7, 10], "some": [2, 4, 10], "packag": [2, 5, 6, 9], "countdown": [2, 3, 8], "coin": [2, 3, 4, 5, 8, 10], "chang": [2, 3, 4, 5, 8, 9, 10], "all": [2, 4, 8, 10], "auto_examples_python": 2, "zip": 2, "auto_examples_jupyt": 2, "00": [3, 8], "000": [3, 8], "total": [3, 4, 8, 10], "execut": [3, 8], "2": [3, 4, 7, 8, 10], "file": [3, 4, 6, 8, 10], "auto_exampl": 3, "mem": [3, 8], "mb": [3, 8], "The": [4, 6, 7, 10], "main": 4, "purpos": 4, "present": [4, 10], "easi": 4, "implement": [4, 5, 7, 10], "so": [4, 10], "prioriti": 4, "wa": [4, 10], "put": 4, "simplic": 4, "readabl": 4, "rather": 4, "than": [4, 10], "effici": 4, "For": [4, 7], "even": [4, 10], "though": 4, "dijkstra": [4, 7, 9], "": [4, 7, 10], "ha": [4, 10], "best": 4, "worst": [4, 10], "case": [4, 10], "time": [4, 10], "complex": [4, 10], "when": [4, 10], "fibonacci": 4, "heap": [4, 10], "we": [4, 7, 10], "choos": [4, 10], "simpler": 4, "which": [4, 7, 10], "have": [4, 10], "wors": 4, "still": 4, "accept": 4, "organ": 4, "problem": [4, 5, 10], "class": [4, 10], "follow": [4, 7, 10], "illustr": 4, "how": [4, 10], "read": [4, 9, 10], "standard": [4, 10], "input": [4, 10], "write": [4, 10], "output": [4, 10], "us": [4, 6, 7, 10], "freivald": [4, 9], "test": [4, 10], "n": [4, 10], "matric": [4, 10], "A": [4, 10], "b": [4, 10], "c": [4, 10], "goal": 4, "decid": [4, 10], "whether": [4, 10], "ab": [4, 10], "naiv": [4, 10], "would": [4, 7], "o": [4, 10], "But": [4, 10], "random": [4, 9, 10], "vector": [4, 10], "abx": 4, "cx": 4, "It": 4, "can": [4, 6, 7, 10], "shown": [4, 10], "probabl": [4, 10], "fail": 4, "detect": [4, 10], "differ": [4, 10], "negligibli": 4, "small": [4, 10], "simpl": [4, 10], "first": [4, 7, 10], "out": 4, "queue": [4, 10], "our_queu": [4, 9], "well": 4, "our_heap": [4, 9], "union": [4, 9, 10], "find": [4, 7, 9, 10], "permit": [4, 10], "maintain": [4, 10], "partit": [4, 10], "item": [4, 10], "typic": 4, "vertic": [4, 10], "oper": [4, 10], "y": [4, 10], "merg": [4, 9, 10], "two": [4, 10], "contain": [4, 6, 7, 10], "canon": 4, "element": [4, 10], "kruskal": [4, 9], "order": [4, 7, 9, 10], "tupl": [4, 10], "lexicograph": [4, 10], "major": [4, 9], "identifi": [4, 10], "list": [4, 7, 10], "quit": 4, "sort": [4, 10], "closest_valu": [4, 9], "closest": [4, 10], "valu": [4, 10], "sweeplin": [4, 10], "techniqu": [4, 10], "mani": [4, 10], "comput": [4, 5, 7, 10], "geometr": 4, "In": [4, 7, 10], "max_interval_intersec": [4, 9], "maximum": [4, 10], "number": [4, 10], "among": 4, "other": [4, 10], "includ": [4, 10], "greedi": 4, "scalar": [4, 9], "permut": [4, 10], "minim": [4, 10], "product": [4, 10], "sometim": 4, "conveni": 4, "encod": [4, 7, 10], "over": [4, 10], "univers": [4, 10], "bit": [4, 10], "integ": [4, 10], "express": [4, 7, 10], "reach": [4, 10], "close": [4, 10], "possibl": [4, 7], "target": [4, 10], "binary_search": [4, 9], "variant": [4, 10], "binari": [4, 10], "search": [4, 7, 9, 10], "ternary_search": [4, 9, 10], "biton": [4, 10], "function": [4, 7, 10], "logarithm": 4, "size": [4, 10], "veri": 4, "interest": 4, "call": [4, 7, 10], "partitionrefin": [4, 9, 10], "refin": [4, 9, 10], "split": [4, 9, 10], "each": [4, 10], "part": [4, 10], "p": [4, 10], "current": [4, 10], "linear": [4, 7, 10], "similar": [4, 10], "pc_tree": [4, 9], "partion": 4, "ground": 4, "satisfi": [4, 10], "constraint": [4, 10], "form": [4, 10], "need": [4, 7, 10], "consecut": [4, 10], "one": [4, 10], "add": [4, 9, 10], "check": [4, 10], "valid": [4, 10], "those": [4, 10], "doubl": 4, "link": [4, 10], "adapt": [4, 10], "david": 4, "eppstein": [4, 10], "anagram": [4, 9], "letter": 4, "show": [4, 10], "mobil": [4, 10], "phone": [4, 10], "exist": [4, 10], "befor": [4, 10], "smart": 4, "had": 4, "type": [4, 10], "text": [4, 10], "messag": 4, "kei": [4, 9, 10], "9": [4, 7, 10], "digit": 4, "map": [4, 10], "predict": [4, 10], "most": [4, 5, 10], "like": 4, "user": 4, "want": [4, 7], "frequenc": [4, 10], "augment": 4, "dictionari": [4, 7, 10], "predictive_text": [4, 9], "done": [4, 10], "eleg": 4, "known": [4, 7], "manach": [4, 7, 9], "palindrom": [4, 5, 10], "substr": [4, 5, 10], "studi": 4, "t": [4, 10], "insid": 4, "solv": [4, 9, 10], "knuth_morris_pratt": [4, 9], "longest": [4, 5, 10], "border": [4, 10], "prefix": [4, 10], "w": [4, 10], "maximum_border_length": [4, 9, 10], "also": [4, 7], "One": 4, "applic": 4, "largest": [4, 10], "power": [4, 10], "k": [4, 10], "result": 4, "concaten": 4, "copi": 4, "altern": [4, 10], "been": [4, 10], "rabin": [4, 10], "karp": [4, 10], "rabin_karp": [4, 9], "advantag": 4, "multipl": [4, 10], "pattern": 4, "dimens": [4, 10], "common": [4, 10], "trie": [4, 9], "store": [4, 10], "allow": [4, 10], "spell": 4, "error": 4, "checker": 4, "dynam": [4, 7, 10], "program": [4, 7, 10], "classic": 4, "edit": [4, 10], "distanc": [4, 7, 10], "levenshtein": [4, 9], "between": [4, 10], "subsequ": [4, 10], "longest_common_subsequ": [4, 9], "increas": [4, 10], "longest_increasing_subsequ": [4, 9], "consist": [4, 6, 10], "merge_ordered_list": [4, 9], "area": [4, 9, 10], "cach": 4, "maxim": [4, 10], "where": [4, 7, 10], "fault": 4, "happen": 4, "inclus": 4, "wise": 4, "distinct": [4, 10], "slide": [4, 10], "window": [4, 10], "windows_k_distinct": [4, 9], "object": [4, 10], "possibli": [4, 10], "implicit": 4, "manner": 4, "access": [4, 10], "modif": 4, "queri": [4, 9, 10], "rang": [4, 10], "minimum": [4, 10], "modifi": [4, 10], "individu": 4, "indic": [4, 10], "segment": [4, 10], "range_minimum_queri": [4, 9], "There": 4, "cute": 4, "lazysegmenttre": [4, 9, 10], "updat": [4, 9, 10], "index": [4, 5, 7, 10], "ad": [4, 10], "same": [4, 10], "ask": 4, "sum": [4, 9, 10], "fenwick": [4, 9], "again": 4, "cover": [4, 9, 10], "nice": 4, "select": [4, 10], "interval_tre": [4, 9], "smallest": [4, 10], "hit": 4, "intersect": [4, 10], "sweep": [4, 10], "line": [4, 7, 10], "mention": 4, "abov": [4, 7, 10], "interval_cov": [4, 9], "your": [4, 7], "adjac": [4, 7, 10], "th": [4, 10], "vertex": [4, 7, 10], "label": [4, 10], "edg": [4, 7, 10], "separ": [4, 10], "listlist": [4, 7, 10], "format": [4, 7, 10], "contrast": 4, "neighbor": [4, 7, 10], "attach": [4, 9, 10], "weight": [4, 7, 10], "listdict": [4, 7, 10], "undirect": [4, 10], "repres": [4, 7, 9, 10], "direct": [4, 10], "duplic": 4, "opposit": 4, "face": 4, "arc": [4, 7, 10], "work": 4, "document": 4, "pad": [4, 9, 10], "u": [4, 7, 10], "v": [4, 7, 10], "represent": [4, 7, 10], "node": [4, 7, 9, 10], "ani": [4, 10], "hashabl": [4, 10], "dictdict": 4, "provid": 4, "convert": [4, 9, 10], "name": [4, 6, 10], "matrix_to_listlist": [4, 9, 10], "listlist_and_matrix_to_listdict": [4, 9, 10], "listdict_to_listlist_and_matrix": [4, 9, 10], "dictdict_to_listdict": [4, 9, 10], "addit": [4, 10], "graphnamedvertic": [4, 9, 10], "sever": [4, 6], "tabl": [4, 7, 10], "root": [4, 10], "refer": 4, "descend": 4, "anteced": 4, "none": [4, 7, 10], "helper": 4, "dot": [4, 10], "modul": [4, 5, 6, 9], "explor": [4, 10], "along": [4, 10], "connect": [4, 10], "compon": [4, 10], "depth": [4, 10], "df": [4, 9], "its": [4, 5, 10], "iter": [4, 10], "recurs": [4, 10], "special": 4, "grid": [4, 10], "breadth": [4, 10], "bf": [4, 9], "Such": 4, "is_bipartit": [4, 9, 10], "bfs_implicit": [4, 9, 10], "implictli": 4, "cut": [4, 10], "remov": [4, 9, 10], "defin": [4, 10], "similarli": 4, "determin": [4, 10], "biconnect": 4, "particular": 4, "pair": [4, 10], "disjoint": [4, 10], "These": [4, 10], "commun": 4, "network": 4, "subtl": 4, "biconnected_compon": [4, 9], "topolog": [4, 10], "everi": [4, 10], "point": [4, 10], "onli": [4, 10], "left": [4, 10], "right": [4, 10], "topological_ord": [4, 9], "anoth": [4, 10], "strongli": [4, 10], "them": 4, "tarjan": [4, 9, 10], "kosaraju": [4, 9, 10], "strongly_connected_compon": [4, 9], "resolut": 4, "sat": [4, 10], "boolean": [4, 10], "formula": [4, 10], "two_sat": [4, 9], "polynomi": [4, 10], "horn": [4, 10], "horn_sat": [4, 9], "second": 4, "third": 4, "length": [4, 10], "eulerian": [4, 10], "visit": [4, 10], "exactli": [4, 10], "onc": [4, 10], "implcitli": 4, "outdegre": 4, "appli": [4, 10], "lead": [4, 10], "infinit": [4, 10], "after": [4, 10], "d": [4, 10], "period": [4, 10], "e": [4, 10], "find_cycl": [4, 9, 10], "cdot": 4, "breath": 4, "shortest_cycl": [4, 9], "bellman": [4, 10], "ford": [4, 10], "bellman_ford": [4, 9], "mean": [4, 10], "min_mean_cycl": [4, 9], "both": [4, 7, 10], "eulerian_tour": [4, 9], "hamiltonian": [4, 10], "complet": [4, 10], "held": 4, "hamiltonian_cycl": [4, 9], "outdeg": 4, "floyd": [4, 10], "tortois": 4, "hare": 4, "tortoise_har": [4, 9], "thei": [4, 10], "summar": 4, "assum": [4, 10], "geq": 4, "unweight": [4, 10], "dist_grid": [4, 9], "dequ": 4, "graph01": [4, 9], "non": [4, 10], "neg": [4, 10], "log": [4, 10], "lower": 4, "bound": [4, 10], "a_star": [4, 9], "arbitrari": [4, 10], "destin": 4, "warshal": [4, 10], "floyd_warshal": [4, 9], "cardin": [4, 10], "bipartit": [4, 10], "bipartite_match": [4, 9], "reduct": [4, 10], "bipartite_vertex_cov": [4, 9], "profit": [4, 10], "hungarian": 4, "kuhn_munkr": [4, 9], "stabl": [4, 10], "gale": [4, 10], "shaplei": [4, 10], "gale_shaplei": [4, 9], "max": [4, 9, 10], "capac": [4, 10], "fulkerson": [4, 10], "ford_fulkerson": [4, 9], "edmond": [4, 10], "edmonds_karp": [4, 9], "dinic": [4, 9], "decomposit": 4, "acycl": [4, 10], "dilworth": [4, 9], "construct": [4, 10], "optim": [4, 10], "huffman": [4, 9], "found": [4, 10], "concern": 4, "variou": [4, 5], "request": [4, 10], "dyn_prog_trick": [4, 9], "task": 4, "quadrat": 4, "famou": 4, "span": [4, 10], "lowest": [4, 7, 10], "ancestor": [4, 10], "build": [4, 10], "answer": 4, "solut": [4, 10], "lowest_common_ancestor": [4, 9], "insert": [4, 9, 10], "delet": [4, 10], "skip": [4, 10], "expect": [4, 10], "cost": [4, 7, 10], "knapsack": [4, 9], "wish": 4, "subset": [4, 10], "doe": [4, 10], "exce": 4, "np": 4, "hard": 4, "nc": 4, "collect": 4, "unbound": 4, "up": [4, 9, 10], "method": [4, 10], "larg": 4, "lceil": [4, 10], "rceil": [4, 10], "subsetsum_divid": [4, 9], "convex": [4, 10], "hull": [4, 10], "euclidean": [4, 10], "space": [4, 10], "book": [4, 5], "graham": 4, "made": 4, "choic": 4, "andrew": [4, 9, 10], "avoid": 4, "trigonometr": 4, "convex_hul": [4, 9], "With": [4, 5], "without": [4, 10], "more": [4, 10], "tricki": 4, "less": [4, 10], "divid": 4, "conquer": 4, "approach": [4, 10], "run": [4, 10], "closest_point": [4, 9], "And": 4, "pareto": [4, 9], "domin": [4, 10], "sai": 4, "smaller": 4, "coordin": [4, 10], "strictli": [4, 10], "least": [4, 10], "polygon": [4, 9], "rectilinear": [4, 10], "verifi": 4, "is_simpl": [4, 9, 10], "puzzl": 4, "lot": 4, "plane": 4, "4": [4, 7, 10], "corner": [4, 10], "rectangl": [4, 10], "rectangles_from_point": [4, 9], "speak": 4, "amort": [4, 10], "analysi": 4, "under": [4, 10], "histogram": [4, 10], "rectangles_from_histogram": [4, 9], "matrix": [4, 7, 10], "rectangular": [4, 10], "sub": 4, "ones": 4, "rectangles_from_grid": [4, 9], "union_rectangl": [4, 9], "prime": [4, 9], "easili": [4, 10], "eratosthen": [4, 9, 10], "Its": 4, "improv": [4, 10], "gri": [4, 10], "misra": [4, 10], "siev": [4, 10], "produc": [4, 10], "posit": [4, 7, 10], "factor": [4, 10], "greatest": [4, 10], "divisor": [4, 10], "gcd": 4, "english": 4, "pgcd": [4, 9, 10], "bezot": 4, "coeffici": [4, 10], "binomi": [4, 10], "arithm": [4, 9], "fast": [4, 10], "exponenti": [4, 10], "fast_exponenti": [4, 9], "evalu": [4, 10], "stack": 4, "intermedi": 4, "arithm_expr_ev": [4, 9], "system": [4, 10], "equat": [4, 10], "gauss": [4, 10], "jordan": [4, 10], "triangul": 4, "gauss_jordan": [4, 9], "multipli": [4, 10], "matter": 4, "place": 4, "parenthesi": 4, "good": 4, "necessari": 4, "matrix_chain_mult": [4, 9], "roman_numb": [4, 9], "roman": [4, 10], "vice": 4, "versa": 4, "suppos": [4, 7], "you": [4, 6, 7, 10], "let": 4, "karatsuba": [4, 9], "585": [4, 10], "substruct": 4, "howev": 4, "fourier": [4, 10], "transform": [4, 10], "fft": [4, 9], "correspond": [4, 10], "invers": [4, 10], "inv_fft": [4, 9, 10], "mul_poly_fft": [4, 9, 10], "attack": 4, "brute": 4, "forc": 4, "laser_mirror": [4, 9], "cell": [4, 10], "side": 4, "mirror": [4, 10], "orient": [4, 10], "angl": 4, "45": 4, "225": 4, "degre": [4, 10], "trajectori": 4, "laser": [4, 10], "beam": [4, 10], "enter": [4, 10], "specif": [4, 10], "roll": 4, "royc": 4, "danc": [4, 10], "exact": [4, 10], "dancing_link": [4, 9], "sudoku": [4, 9], "final": 4, "procedur": 4, "next_permut": [4, 9], "take": [4, 10], "next": [4, 10], "hope": 4, "instruct": [4, 10], "If": [4, 7, 10], "miss": 4, "know": [4, 10], "might": [4, 7], "look": 4, "networkx": 4, "librari": [5, 6], "algorithm": [5, 7, 10], "data": [5, 7, 10], "structur": [5, 7, 10], "graph": [5, 7, 9], "string": [5, 10], "geometri": 5, "avail": 5, "efficac": 5, "le": [5, 10], "128": 5, "qu": 5, "il": [5, 10], "faut": 5, "avoir": 5, "compri": 5, "et": [5, 10], "cod\u00e9": 5, "en": [5, 10], "au": 5, "cour": 5, "sa": 5, "vie": [5, 10], "translat": 5, "instal": 5, "pip": 5, "pypi": 5, "quick": [5, 10], "start": [5, 10], "pathfind": 5, "content": [5, 9], "basic": 5, "sequenc": [5, 9], "arrai": [5, 10], "interv": [5, 10], "cycl": [5, 10], "shortest": [5, 7, 10], "path": [5, 7, 10], "match": [5, 9, 10], "flow": [5, 10], "relat": 5, "tree": [5, 7, 10], "set": [5, 9, 10], "arithmet": [5, 10], "backtrack": 5, "github": 5, "project": [5, 10], "pip3": 6, "tar": 6, "gz": 6, "extract": [6, 9, 10], "directori": 6, "usr": 7, "bin": 7, "env": 7, "python3": 7, "should": [7, 10], "combin": [7, 10], "babcbabcbaccba": 7, "10": [7, 10], "inde": 7, "exclud": [7, 10], "abcbabcba": 7, "now": 7, "simpli": 7, "squar": [7, 10], "7": 7, "8": 7, "_": 7, "predecessor": [7, 9, 10], "describ": [7, 10], "dist": [7, 9, 10], "prec": [7, 10], "Will": 7, "while": 7, "append": [7, 10], "spars": [7, 10], "few": 7, "formal": 7, "belong": 7, "henc": [7, 10], "invok": 7, "wai": 7, "submodul": 9, "c_node": [9, 10], "clean": [9, 10], "detach": [9, 10], "flip": [9, 10], "frontier": [9, 10], "signal_ful": [9, 10], "to_sign": [9, 10], "infeas": [9, 10], "leaf": [9, 10], "is_ful": [9, 10], "attach_neighbor": [9, 10], "detach_bilater": [9, 10], "is_parti": [9, 10], "represent_par": [9, 10], "print_dot": [9, 10], "restrict": [9, 10], "p_node": [9, 10], "insertaft": [9, 10], "insertbefor": [9, 10], "replac": [9, 10], "successor": [9, 10], "sequenceerror": [9, 10], "bezout": [9, 10], "binom": [9, 10], "binom_modulo": [9, 10], "inv": [9, 10], "arithm_expr_pars": [9, 10], "bellman_ford2": [9, 10], "cut_nodes_edg": [9, 10], "cut_nodes_edges2": [9, 10], "continuous_binary_search": [9, 10], "discrete_binary_search": [9, 10], "optimized_binary_search": [9, 10], "optimized_binary_search_low": [9, 10], "max_bipartite_match": [9, 10], "dfs_grid": [9, 10], "dfs_grid_recurs": [9, 10], "dfs_iter": [9, 10], "dfs_recurs": [9, 10], "dfs_tree": [9, 10], "dijkstra_update_heap": [9, 10], "decode_root_matrix_to_level": [9, 10], "dyn_prog_mong": [9, 10], "opt_bin_search_tree1": [9, 10], "opt_bin_search_tree2": [9, 10], "eulerian_tour_direct": [9, 10], "eulerian_tour_undirect": [9, 10], "is_eulerian_tour_direct": [9, 10], "is_eulerian_tour_undirect": [9, 10], "random_eulerien_graph": [9, 10], "write_cycl": [9, 10], "fast_exponentiation2": [9, 10], "get": [9, 10], "intervaladd": [9, 10], "intervalsum": [9, 10], "prefixsum": [9, 10], "fenwickmin": [9, 10], "prefixmin": [9, 10], "floyd_warshall2": [9, 10], "add_arc": [9, 10], "add_edg": [9, 10], "add_nod": [9, 10], "add_reverse_arc": [9, 10], "extract_path": [9, 10], "make_flow_label": [9, 10], "read_graph": [9, 10], "readtab": [9, 10], "readval": [9, 10], "tree_adj_to_prec": [9, 10], "tree_prec_to_adj": [9, 10], "write_graph": [9, 10], "dist01": [9, 10], "intervals_contain": [9, 10], "intervals_union": 9, "add_poli": [9, 10], "eval_poli": [9, 10], "mul_poli": [9, 10], "sub_poli": [9, 10], "knapsack2": [9, 10], "powerstring_by_bord": [9, 10], "powerstring_by_find": [9, 10], "unionfind": [9, 10], "kuhn_munkres_n4": 9, "left_right_invers": 9, "lowestcommonancestorrmq": [9, 10], "lowestcommonancestorshortcut": [9, 10], "log2ceil": [9, 10], "log2floor": [9, 10], "matrix_mult_opt_ord": [9, 10], "solve_word_addit": [9, 10], "ourheap": [9, 10], "down": [9, 10], "pop": [9, 10], "push": [9, 10], "ourqueu": [9, 10], "our_std": 9, "readarrai": [9, 10], "readint": [9, 10], "readmatrix": [9, 10], "readstr": [9, 10], "pareto2d": [9, 10], "pareto3d": [9, 10], "partition_refin": 9, "tolist": [9, 10], "permutation_rank": 9, "rank_permut": [9, 10], "propos": [9, 10], "gries_misra": [9, 10], "rabin_karp_factor": [9, 10], "rabin_karp_match": [9, 10], "roll_hash": [9, 10], "min": [9, 10], "rangeminqueri": [9, 10], "range_min": [9, 10], "int2roman": [9, 10], "roman2int": [9, 10], "min_scalar_prod": [9, 10], "powergraph": [9, 10], "skip_list": 9, "abstractskiplist": [9, 10], "getkth": [9, 10], "lastkei": [9, 10], "nextkei": [9, 10], "nextnod": [9, 10], "randomheight": [9, 10], "sorteddict": [9, 10], "sortedset": [9, 10], "revers": [9, 10], "tarjan_recursif": [9, 10], "subset_sum": [9, 10], "part_sum": [9, 10], "part_sum2": [9, 10], "subset_sum2": [9, 10], "suffix_arrai": 9, "sort_class": [9, 10], "sort_cyclic_shift": [9, 10], "three_partit": 9, "topological_order_df": [9, 10], "trienod": [9, 10], "spell_check": [9, 10], "coverqueri": [9, 10], "rectangles_contains_point": [9, 10], "union_interv": [9, 10], "union_rectangles_fast": [9, 10], "union_rectangles_fastest": [9, 10], "union_rectangles_na": [9, 10], "rami": 10, "benelmir": 10, "christoph": 10, "d\u00fcrr": 10, "erisa": 10, "kohans": 10, "2023": 10, "pc": 10, "modulo": 10, "keep": 10, "consid": 10, "circular": 10, "come": 10, "todo": 10, "annot": 10, "reset": 10, "attribut": 10, "default": 10, "old": 10, "invert": 10, "trace": 10, "int": 10, "discov": 10, "initi": 10, "show_par": 10, "fals": 10, "correctli": 10, "termin": 10, "unit": 10, "fullneighbor": 10, "receiv": 10, "signal": 10, "counter": 10, "new": 10, "except": 10, "reason": 10, "rais": 10, "imposs": 10, "id": 10, "parent": 10, "abc": 10, "group": 10, "subclass": 10, "intend": 10, "instanti": 10, "heritag": 10, "abstract": 10, "dure": 10, "manag": 10, "to_detach": 10, "bool": 10, "empti": 10, "singleton": 10, "nb_leav": 10, "redirect": 10, "render": 10, "pdf": 10, "pass": 10, "argument": 10, "full_neighbor": 10, "creat": 10, "becom": 10, "doubli": 10, "subject": 10, "copyright": 10, "novemb": 10, "2003": 10, "mit": 10, "licenc": 10, "simplifi": 10, "built": 10, "constant": 10, "proport": 10, "suppli": 10, "previou": 10, "preserv": 10, "jill": 10, "j\u00eann": 10, "lower_bound": 10, "singl": 10, "paramet": 10, "lb": 10, "must": 10, "unreach": 10, "2013": 10, "2019": 10, "word": 10, "averag": 10, "due": 10, "usag": 10, "b\u00e9zout": 10, "mathbb": 10, "z": 10, "_p": 10, "jenn": 10, "durr": 10, "2014": 10, "2020": 10, "expr": 10, "variabl": 10, "numer": 10, "line_token": 10, "token": 10, "jean": 10, "filli\u00e2tr": 10, "huge": 10, "2018": 10, "preced": 10, "circuit": 10, "reachabl": 10, "inf": 10, "2015": 10, "implicitli": 10, "bi": 10, "loui": 10, "abraham": 10, "cannot": 10, "about": 10, "5000": 10, "otherwis": 10, "memori": 10, "limit": 10, "f": 10, "lo": 10, "hi": 10, "gap": 10, "0001": 10, "monoton": 10, "float": 10, "precis": 10, "tab": 10, "logsiz": 10, "textrm": 10, "last": 10, "1e": 10, "ternari": 10, "decreas": 10, "necessarili": 10, "biparti": 10, "bigraph": 10, "comment": 10, "iff": 10, "koenig": 10, "theorem": 10, "assumpt": 10, "len": 10, "trouver": 10, "la": 10, "plu": 10, "proch": 10, "requir": 10, "q": 10, "l": 10, "size_univers": 10, "j": 10, "mark": 10, "free": 10, "str": 10, "version": 10, "neighborhood": 10, "symbol": 10, "walkabl": 10, "overwrit": 10, "dict": 10, "seen": 10, "g": 10, "travers": 10, "assign": 10, "color": 10, "identici": 10, "endpoint": 10, "stop": 10, "negatif": 10, "decompos": 10, "dag": 10, "chain": 10, "give": 10, "skew": 10, "symmetr": 10, "row": 10, "column": 10, "ind_ic": 10, "speedup": 10, "trick": 10, "2022": 10, "r": 10, "decod": 10, "level": 10, "mong": 10, "properti": 10, "quadrangl": 10, "inequ": 10, "lattic": 10, "freq": 10, "dimension": 10, "subproblem": 10, "actual": 10, "success": 10, "failur": 10, "ignor": 10, "do": 10, "normal": 10, "tour": 10, "membership": 10, "filenam": 10, "written": 10, "noth": 10, "pow": 10, "shorter": 10, "val": 10, "virtual": 10, "infin": 10, "sampl": 10, "zero": 10, "make": 10, "pascal": 10, "ortiz": 10, "max_capac": 10, "high": 10, "men": 10, "women": 10, "prefer": 10, "ax": 10, "m": 10, "uniqu": 10, "2m": 10, "name_u": 10, "name_v": 10, "weight_uv": 10, "eventu": 10, "lightest": 10, "kept": 10, "alreadi": 10, "util": 10, "dictgraph": 10, "name_to_nod": 10, "node_to_nam": 10, "coupl": 10, "option": 10, "listdic": 10, "entri": 10, "default_weight": 10, "plain": 10, "Then": 10, "three": 10, "fi": 10, "ty": 10, "stream": 10, "sy": 10, "stdin": 10, "dotfil": 10, "node_label": 10, "arc_label": 10, "node_mark": 10, "arc_mark": 10, "grai": 10, "arc_marc": 10, "red": 10, "2016": 10, "claus": 10, "posvar_in_claus": 10, "clause_with_negvar": 10, "score": 10, "sol": 10, "pool": 10, "posvar": 10, "negvar": 10, "els": 10, "var": 10, "liter": 10, "inner": 10, "left_sub_tre": 10, "right_sub_tre": 10, "01": 10, "charact": 10, "half": 10, "open": 10, "assert": 10, "low": 10, "param": 10, "log_2": 10, "subtruct": 10, "vectr": 10, "cmax": 10, "bag": 10, "behavior": 10, "knuth": 10, "morri": 10, "pratt": 10, "inspir": 10, "practic": 10, "lesson": 10, "tp": 10, "yve": 10, "lemair": 10, "haystack": 10, "needl": 10, "x_index": 10, "complex_index": 10, "inverse_ackerman": 10, "y_index": 10, "kuhn": 10, "munkr": 10, "samuel": 10, "tardieu": 10, "primal": 10, "lp": 10, "sum_": 10, "sum_v": 10, "sum_u": 10, "dual": 10, "trivial": 10, "complementari": 10, "slack": 10, "condit": 10, "toler": 10, "06": 10, "absolut": 10, "below": 10, "being": 10, "fraction": 10, "chosen": 10, "perfect": 10, "just": 10, "col": 10, "mir": 10, "entranc": 10, "exit": 10, "succ": 10, "orien": 10, "direc": 10, "leav": 10, "compar": 10, "shortcut": 10, "round": 10, "appear": 10, "tie": 10, "break": 10, "nk": 10, "2k": 10, "http": 10, "leetcod": 10, "com": 10, "2011": 10, "ii": 10, "html": 10, "probl\u00e8m": 10, "long": 10, "entr\u00e9": 10, "cha\u00een": 10, "sorti": 10, "tel": 10, "que": 10, "est": 10, "un": 10, "complexit\u00e9": 10, "temp": 10, "lin\u00e9air": 10, "tou": 10, "r\u00e9f\u00e8rent": 10, "\u00e0": 10, "fictiv": 10, "si": 10, "abaa": 10, "invari": 10, "pour": 10, "chaqu": 10, "pr\u00e9fix": 10, "vu": 10, "maintient": 10, "centr\u00e9": 10, "bord": 10, "droit": 10, "qui": 10, "maximis": 10, "ainsi": 10, "grand": 10, "rayon": 10, "whatev": 10, "opt": 10, "arg": 10, "nondecreas": 10, "prochain": 10, "permuat": 10, "ass": 10, "cryptogram": 10, "style": 10, "send": 10, "monei": 10, "rank": 10, "init": 10, "fifo": 10, "__str__": 10, "obj": 10, "typ": 10, "nlog": 10, "15": 10, "nonsens": 10, "move": 10, "back": 10, "flatten": 10, "pivot": 10, "setminu": 10, "accord": 10, "bewar": 10, "big": 10, "equal": 10, "mesur": 10, "taken": 10, "segement": 10, "dic": 10, "associ": 10, "highest": 10, "prop": 10, "seq": 10, "wrapper": 10, "nombr": 10, "premier": 10, "loglog": 10, "loop": 10, "eas": 10, "languag": 10, "old_val": 10, "out_digit": 10, "in_digit": 10, "last_po": 10, "plage": 10, "minrangequeri": 10, "act": 10, "neutral": 10, "clear": 10, "maxval": 10, "minval": 10, "sumval": 10, "respons": 10, "lazyset": 10, "lazyadd": 10, "suspendet": 10, "propag": 10, "descent": 10, "subtre": 10, "monochromatiqu": 10, "black": 10, "fill": 10, "top": 10, "bottom": 10, "h": 10, "height": 10, "rect": 10, "9999": 10, "sens": 10, "sigma": 10, "finn": 10, "voelkel": 10, "footnot": 10, "pariti": 10, "cycle_len": 10, "2017": 10, "kunigami": 10, "2012": 10, "09": 10, "count": 10, "www": 10, "bgu": 10, "ac": 10, "ds112": 10, "wiki": 10, "ds112_ps7": 10, "static": 10, "alia": 10, "field": 10, "composant": 10, "fortement": 10, "connex": 10, "x_tabl": 10, "index_t": 10, "suffix_t": 10, "r_target": 10, "nanpur": 10, "could": 10, "usual": 10, "publish": 10, "9x9": 10, "suffix": 10, "enough": 10, "contest": 10, "2024": 10, "inform": 10, "better": 10, "cyclic": 10, "shift": 10, "triplet": 10, "2n": 10, "indegre": 10, "finit": 10, "domain": 10, "itself": 10, "warn": 10, "forev": 10, "correcteur": 10, "orthographiqu": 10, "spellcheck": 10, "x1": 10, "xn": 10, "x3": 10, "offset": 10, "either": 10, "minu": 10, "multiset": 10, "horizont": 10, "process": 10, "yet": 10, "y1": 10, "x2": 10, "y2": 10, "yield": 10}, "objects": {"": [[10, 0, 0, "-", "tryalgo"]], "tryalgo": [[10, 0, 0, "-", "PC_tree"], [10, 0, 0, "-", "Sequence"], [10, 0, 0, "-", "a_star"], [10, 0, 0, "-", "anagrams"], [10, 0, 0, "-", "arithm"], [10, 0, 0, "-", "arithm_expr_eval"], [10, 0, 0, "-", "arithm_expr_target"], [10, 0, 0, "-", "bellman_ford"], [10, 0, 0, "-", "bfs"], [10, 0, 0, "-", "biconnected_components"], [10, 0, 0, "-", "binary_search"], [10, 0, 0, "-", "bipartite_matching"], [10, 0, 0, "-", "bipartite_vertex_cover"], [10, 0, 0, "-", "closest_points"], [10, 0, 0, "-", "closest_values"], [10, 0, 0, "-", "convex_hull"], [10, 0, 0, "-", "dancing_links"], [10, 0, 0, "-", "dfs"], [10, 0, 0, "-", "dijkstra"], [10, 0, 0, "-", "dilworth"], [10, 0, 0, "-", "dinic"], [10, 0, 0, "-", "dist_grid"], [10, 0, 0, "-", "dyn_prog_tricks"], [10, 0, 0, "-", "edmonds_karp"], [10, 0, 0, "-", "eulerian_tour"], [10, 0, 0, "-", "fast_exponentiation"], [10, 0, 0, "-", "fenwick"], [10, 0, 0, "-", "fft"], [10, 0, 0, "-", "floyd_warshall"], [10, 0, 0, "-", "ford_fulkerson"], [10, 0, 0, "-", "freivalds"], [10, 0, 0, "-", "gale_shapley"], [10, 0, 0, "-", "gauss_jordan"], [10, 0, 0, "-", "graph"], [10, 0, 0, "-", "graph01"], [10, 0, 0, "-", "hamiltonian_cycle"], [10, 0, 0, "-", "horn_sat"], [10, 0, 0, "-", "huffman"], [10, 0, 0, "-", "interval_cover"], [10, 0, 0, "-", "interval_tree"], [10, 0, 0, "-", "intervals_union"], [10, 0, 0, "-", "karatsuba"], [10, 0, 0, "-", "knapsack"], [10, 0, 0, "-", "knuth_morris_pratt"], [10, 0, 0, "-", "kruskal"], [10, 0, 0, "-", "kuhn_munkres"], [10, 0, 0, "-", "kuhn_munkres_n4"], [10, 0, 0, "-", "laser_mirrors"], [10, 0, 0, "-", "left_right_inversions"], [10, 0, 0, "-", "levenshtein"], [10, 0, 0, "-", "longest_common_subsequence"], [10, 0, 0, "-", "longest_increasing_subsequence"], [10, 0, 0, "-", "lowest_common_ancestor"], [10, 0, 0, "-", "majority"], [10, 0, 0, "-", "manacher"], [10, 0, 0, "-", "matrix_chain_mult"], [10, 0, 0, "-", "max_interval_intersec"], [10, 0, 0, "-", "merge_ordered_lists"], [10, 0, 0, "-", "min_mean_cycle"], [10, 0, 0, "-", "next_permutation"], [10, 0, 0, "-", "our_heap"], [10, 0, 0, "-", "our_queue"], [10, 0, 0, "-", "our_std"], [10, 0, 0, "-", "pareto"], [10, 0, 0, "-", "partition_refinement"], [10, 0, 0, "-", "permutation_rank"], [10, 0, 0, "-", "polygon"], [10, 0, 0, "-", "predictive_text"], [10, 0, 0, "-", "primes"], [10, 0, 0, "-", "rabin_karp"], [10, 0, 0, "-", "range_minimum_query"], [10, 0, 0, "-", "rectangles_from_grid"], [10, 0, 0, "-", "rectangles_from_histogram"], [10, 0, 0, "-", "rectangles_from_points"], [10, 0, 0, "-", "roman_numbers"], [10, 0, 0, "-", "scalar"], [10, 0, 0, "-", "shortest_cycle"], [10, 0, 0, "-", "skip_list"], [10, 0, 0, "-", "strongly_connected_components"], [10, 0, 0, "-", "subsetsum"], [10, 0, 0, "-", "subsetsum_divide"], [10, 0, 0, "-", "sudoku"], [10, 0, 0, "-", "suffix_array"], [10, 0, 0, "-", "three_partition"], [10, 0, 0, "-", "topological_order"], [10, 0, 0, "-", "tortoise_hare"], [10, 0, 0, "-", "trie"], [10, 0, 0, "-", "two_sat"], [10, 0, 0, "-", "union_rectangles"], [10, 0, 0, "-", "windows_k_distinct"]], "tryalgo.PC_tree": [[10, 1, 1, "", "C_node"], [10, 3, 1, "", "Infeasible"], [10, 1, 1, "", "Leaf"], [10, 1, 1, "", "Node"], [10, 1, 1, "", "PC_tree"], [10, 1, 1, "", "P_node"]], "tryalgo.PC_tree.C_node": [[10, 2, 1, "", "clean"], [10, 2, 1, "", "detach"], [10, 2, 1, "", "flip"], [10, 2, 1, "", "frontier"], [10, 2, 1, "", "represent"], [10, 2, 1, "", "signal_full"], [10, 2, 1, "", "split"], [10, 2, 1, "", "to_signal"]], "tryalgo.PC_tree.Leaf": [[10, 2, 1, "", "attach"], [10, 2, 1, "", "clean"], [10, 2, 1, "", "detach"], [10, 2, 1, "", "frontier"], [10, 2, 1, "", "is_full"], [10, 2, 1, "", "to_signal"]], "tryalgo.PC_tree.Node": [[10, 2, 1, "", "attach"], [10, 2, 1, "", "attach_neighbors"], [10, 2, 1, "", "clean"], [10, 2, 1, "", "detach"], [10, 2, 1, "", "detach_bilateral"], [10, 2, 1, "", "is_full"], [10, 2, 1, "", "is_partial"], [10, 2, 1, "", "represent_parent"], [10, 2, 1, "", "signal_full"]], "tryalgo.PC_tree.PC_tree": [[10, 2, 1, "", "frontier"], [10, 2, 1, "", "print_dot"], [10, 2, 1, "", "represent"], [10, 2, 1, "", "restrict"]], "tryalgo.PC_tree.P_node": [[10, 2, 1, "", "clean"], [10, 2, 1, "", "frontier"], [10, 2, 1, "", "represent"], [10, 2, 1, "", "signal_full"], [10, 2, 1, "", "split"], [10, 2, 1, "", "to_signal"]], "tryalgo.Sequence": [[10, 1, 1, "", "Sequence"], [10, 3, 1, "", "SequenceError"]], "tryalgo.Sequence.Sequence": [[10, 2, 1, "", "add"], [10, 2, 1, "", "insertAfter"], [10, 2, 1, "", "insertBefore"], [10, 2, 1, "", "key"], [10, 2, 1, "", "predecessor"], [10, 2, 1, "", "remove"], [10, 2, 1, "", "replace"], [10, 2, 1, "", "successor"]], "tryalgo.a_star": [[10, 4, 1, "", "a_star"]], "tryalgo.anagrams": [[10, 4, 1, "", "anagrams"]], "tryalgo.arithm": [[10, 4, 1, "", "bezout"], [10, 4, 1, "", "binom"], [10, 4, 1, "", "binom_modulo"], [10, 4, 1, "", "inv"], [10, 4, 1, "", "pgcd"]], "tryalgo.arithm_expr_eval": [[10, 4, 1, "", "arithm_expr_eval"], [10, 4, 1, "", "arithm_expr_parse"]], "tryalgo.arithm_expr_target": [[10, 4, 1, "", "arithm_expr_target"]], "tryalgo.bellman_ford": [[10, 4, 1, "", "bellman_ford"], [10, 4, 1, "", "bellman_ford2"]], "tryalgo.bfs": [[10, 4, 1, "", "bfs"], [10, 4, 1, "", "bfs_implicit"]], "tryalgo.biconnected_components": [[10, 4, 1, "", "cut_nodes_edges"], [10, 4, 1, "", "cut_nodes_edges2"]], "tryalgo.binary_search": [[10, 4, 1, "", "continuous_binary_search"], [10, 4, 1, "", "discrete_binary_search"], [10, 4, 1, "", "optimized_binary_search"], [10, 4, 1, "", "optimized_binary_search_lower"], [10, 4, 1, "", "ternary_search"]], "tryalgo.bipartite_matching": [[10, 4, 1, "", "max_bipartite_matching"]], "tryalgo.bipartite_vertex_cover": [[10, 4, 1, "", "bipartite_vertex_cover"]], "tryalgo.closest_points": [[10, 4, 1, "", "closest_points"]], "tryalgo.closest_values": [[10, 4, 1, "", "closest_values"]], "tryalgo.convex_hull": [[10, 4, 1, "", "andrew"]], "tryalgo.dancing_links": [[10, 4, 1, "", "dancing_links"]], "tryalgo.dfs": [[10, 4, 1, "", "dfs_grid"], [10, 4, 1, "", "dfs_grid_recursive"], [10, 4, 1, "", "dfs_iterative"], [10, 4, 1, "", "dfs_recursive"], [10, 4, 1, "", "dfs_tree"], [10, 4, 1, "", "find_cycle"], [10, 4, 1, "", "is_bipartite"]], "tryalgo.dijkstra": [[10, 4, 1, "", "dijkstra"], [10, 4, 1, "", "dijkstra_update_heap"]], "tryalgo.dilworth": [[10, 4, 1, "", "dilworth"]], "tryalgo.dinic": [[10, 4, 1, "", "dinic"]], "tryalgo.dist_grid": [[10, 4, 1, "", "dist_grid"]], "tryalgo.dyn_prog_tricks": [[10, 4, 1, "", "decode_root_matrix_to_level"], [10, 4, 1, "", "dyn_prog_Monge"], [10, 4, 1, "", "opt_bin_search_tree1"], [10, 4, 1, "", "opt_bin_search_tree2"]], "tryalgo.edmonds_karp": [[10, 4, 1, "", "edmonds_karp"]], "tryalgo.eulerian_tour": [[10, 4, 1, "", "eulerian_tour_directed"], [10, 4, 1, "", "eulerian_tour_undirected"], [10, 4, 1, "", "is_eulerian_tour_directed"], [10, 4, 1, "", "is_eulerian_tour_undirected"], [10, 4, 1, "", "random_eulerien_graph"], [10, 4, 1, "", "write_cycle"]], "tryalgo.fast_exponentiation": [[10, 4, 1, "", "fast_exponentiation"], [10, 4, 1, "", "fast_exponentiation2"]], "tryalgo.fenwick": [[10, 1, 1, "", "Fenwick"], [10, 1, 1, "", "FenwickMin"]], "tryalgo.fenwick.Fenwick": [[10, 2, 1, "", "add"], [10, 2, 1, "", "get"], [10, 2, 1, "", "intervalAdd"], [10, 2, 1, "", "intervalSum"], [10, 2, 1, "", "prefixSum"]], "tryalgo.fenwick.FenwickMin": [[10, 2, 1, "", "prefixMin"], [10, 2, 1, "", "update"]], "tryalgo.fft": [[10, 4, 1, "", "fft"], [10, 4, 1, "", "inv_fft"], [10, 4, 1, "", "mul_poly_fft"], [10, 4, 1, "", "pad"]], "tryalgo.floyd_warshall": [[10, 4, 1, "", "floyd_warshall"], [10, 4, 1, "", "floyd_warshall2"]], "tryalgo.ford_fulkerson": [[10, 4, 1, "", "ford_fulkerson"]], "tryalgo.freivalds": [[10, 4, 1, "", "freivalds"]], "tryalgo.gale_shapley": [[10, 4, 1, "", "gale_shapley"]], "tryalgo.gauss_jordan": [[10, 4, 1, "", "gauss_jordan"]], "tryalgo.graph": [[10, 1, 1, "", "GraphNamedVertices"], [10, 4, 1, "", "add_reverse_arcs"], [10, 4, 1, "", "dictdict_to_listdict"], [10, 4, 1, "", "extract_path"], [10, 4, 1, "", "listdict_to_listlist_and_matrix"], [10, 4, 1, "", "listlist_and_matrix_to_listdict"], [10, 4, 1, "", "make_flow_labels"], [10, 4, 1, "", "matrix_to_listlist"], [10, 4, 1, "", "read_graph"], [10, 4, 1, "", "readtab"], [10, 4, 1, "", "readval"], [10, 4, 1, "", "tree_adj_to_prec"], [10, 4, 1, "", "tree_prec_to_adj"], [10, 4, 1, "", "write_graph"]], "tryalgo.graph.GraphNamedVertices": [[10, 2, 1, "", "add_arc"], [10, 2, 1, "", "add_edge"], [10, 2, 1, "", "add_node"]], "tryalgo.graph01": [[10, 4, 1, "", "dist01"]], "tryalgo.hamiltonian_cycle": [[10, 4, 1, "", "hamiltonian_cycle"]], "tryalgo.horn_sat": [[10, 4, 1, "", "horn_sat"], [10, 4, 1, "", "read"]], "tryalgo.huffman": [[10, 4, 1, "", "extract"], [10, 4, 1, "", "huffman"]], "tryalgo.interval_cover": [[10, 4, 1, "", "interval_cover"]], "tryalgo.interval_tree": [[10, 4, 1, "", "interval_tree"], [10, 4, 1, "", "intervals_containing"]], "tryalgo.intervals_union": [[10, 4, 1, "", "intervals_union"]], "tryalgo.karatsuba": [[10, 4, 1, "", "add_poly"], [10, 4, 1, "", "eval_poly"], [10, 4, 1, "", "mul_poly"], [10, 4, 1, "", "sub_poly"]], "tryalgo.knapsack": [[10, 4, 1, "", "knapsack"], [10, 4, 1, "", "knapsack2"]], "tryalgo.knuth_morris_pratt": [[10, 4, 1, "", "knuth_morris_pratt"], [10, 4, 1, "", "maximum_border_length"], [10, 4, 1, "", "powerstring_by_border"], [10, 4, 1, "", "powerstring_by_find"]], "tryalgo.kruskal": [[10, 1, 1, "", "UnionFind"], [10, 4, 1, "", "dist"], [10, 4, 1, "", "kruskal"]], "tryalgo.kruskal.UnionFind": [[10, 2, 1, "", "find"], [10, 2, 1, "", "union"]], "tryalgo.kuhn_munkres": [[10, 4, 1, "", "kuhn_munkres"]], "tryalgo.kuhn_munkres_n4": [[10, 4, 1, "", "kuhn_munkres"]], "tryalgo.laser_mirrors": [[10, 4, 1, "", "laser_mirrors"], [10, 4, 1, "", "solve"]], "tryalgo.left_right_inversions": [[10, 4, 1, "", "left_right_inversions"]], "tryalgo.levenshtein": [[10, 4, 1, "", "levenshtein"]], "tryalgo.longest_common_subsequence": [[10, 4, 1, "", "longest_common_subsequence"]], "tryalgo.longest_increasing_subsequence": [[10, 4, 1, "", "longest_increasing_subsequence"]], "tryalgo.lowest_common_ancestor": [[10, 1, 1, "", "LowestCommonAncestorRMQ"], [10, 1, 1, "", "LowestCommonAncestorShortcuts"], [10, 4, 1, "", "log2ceil"], [10, 4, 1, "", "log2floor"]], "tryalgo.lowest_common_ancestor.LowestCommonAncestorRMQ": [[10, 2, 1, "", "query"]], "tryalgo.lowest_common_ancestor.LowestCommonAncestorShortcuts": [[10, 2, 1, "", "query"]], "tryalgo.majority": [[10, 4, 1, "", "majority"]], "tryalgo.manacher": [[10, 4, 1, "", "manacher"]], "tryalgo.matrix_chain_mult": [[10, 4, 1, "", "matrix_chain_mult"], [10, 4, 1, "", "matrix_mult_opt_order"]], "tryalgo.max_interval_intersec": [[10, 4, 1, "", "max_interval_intersec"]], "tryalgo.merge_ordered_lists": [[10, 4, 1, "", "merge"]], "tryalgo.min_mean_cycle": [[10, 4, 1, "", "min_mean_cycle"]], "tryalgo.next_permutation": [[10, 4, 1, "", "convert"], [10, 4, 1, "", "next_permutation"], [10, 4, 1, "", "solve_word_addition"]], "tryalgo.our_heap": [[10, 1, 1, "", "OurHeap"]], "tryalgo.our_heap.OurHeap": [[10, 2, 1, "", "down"], [10, 2, 1, "", "pop"], [10, 2, 1, "", "push"], [10, 2, 1, "", "up"], [10, 2, 1, "", "update"]], "tryalgo.our_queue": [[10, 1, 1, "", "OurQueue"]], "tryalgo.our_queue.OurQueue": [[10, 2, 1, "", "pop"], [10, 2, 1, "", "push"]], "tryalgo.our_std": [[10, 4, 1, "", "readarray"], [10, 4, 1, "", "readint"], [10, 4, 1, "", "readmatrix"], [10, 4, 1, "", "readstr"]], "tryalgo.pareto": [[10, 4, 1, "", "pareto2d"], [10, 4, 1, "", "pareto3d"]], "tryalgo.partition_refinement": [[10, 1, 1, "", "PartitionRefinement"]], "tryalgo.partition_refinement.PartitionRefinement": [[10, 2, 1, "", "order"], [10, 2, 1, "", "refine"], [10, 2, 1, "", "tolist"]], "tryalgo.permutation_rank": [[10, 4, 1, "", "permutation_rank"], [10, 4, 1, "", "rank_permutation"]], "tryalgo.polygon": [[10, 4, 1, "", "area"], [10, 4, 1, "", "is_simple"]], "tryalgo.predictive_text": [[10, 4, 1, "", "predictive_text"], [10, 4, 1, "", "propose"]], "tryalgo.primes": [[10, 4, 1, "", "eratosthene"], [10, 4, 1, "", "gries_misra"]], "tryalgo.rabin_karp": [[10, 4, 1, "", "matches"], [10, 4, 1, "", "rabin_karp_factor"], [10, 4, 1, "", "rabin_karp_matching"], [10, 4, 1, "", "roll_hash"]], "tryalgo.range_minimum_query": [[10, 1, 1, "", "LazySegmentTree"], [10, 1, 1, "", "RangeMinQuery"]], "tryalgo.range_minimum_query.LazySegmentTree": [[10, 2, 1, "", "add"], [10, 2, 1, "", "max"], [10, 2, 1, "", "min"], [10, 2, 1, "", "set"], [10, 2, 1, "", "sum"]], "tryalgo.range_minimum_query.RangeMinQuery": [[10, 2, 1, "", "range_min"]], "tryalgo.rectangles_from_grid": [[10, 4, 1, "", "rectangles_from_grid"]], "tryalgo.rectangles_from_histogram": [[10, 4, 1, "", "rectangles_from_histogram"]], "tryalgo.rectangles_from_points": [[10, 4, 1, "", "rectangles_from_points"]], "tryalgo.roman_numbers": [[10, 4, 1, "", "int2roman"], [10, 4, 1, "", "roman2int"]], "tryalgo.scalar": [[10, 4, 1, "", "min_scalar_prod"]], "tryalgo.shortest_cycle": [[10, 4, 1, "", "powergraph"], [10, 4, 1, "", "shortest_cycle"]], "tryalgo.skip_list": [[10, 1, 1, "", "AbstractSkipList"], [10, 1, 1, "", "SortedDict"], [10, 1, 1, "", "SortedSet"], [10, 4, 1, "", "random"]], "tryalgo.skip_list.AbstractSkipList": [[10, 2, 1, "", "find"], [10, 2, 1, "", "getkth"], [10, 2, 1, "", "insert"], [10, 2, 1, "", "lastKey"], [10, 2, 1, "", "nextKey"], [10, 2, 1, "", "nextNode"], [10, 2, 1, "", "randomHeight"], [10, 2, 1, "", "remove"]], "tryalgo.skip_list.SortedDict": [[10, 1, 1, "", "Node"], [10, 2, 1, "", "keys"]], "tryalgo.skip_list.SortedDict.Node": [[10, 5, 1, "", "count"], [10, 5, 1, "", "key"], [10, 5, 1, "", "next"], [10, 5, 1, "", "val"]], "tryalgo.skip_list.SortedSet": [[10, 1, 1, "", "Node"], [10, 2, 1, "", "add"], [10, 2, 1, "", "pop"]], "tryalgo.skip_list.SortedSet.Node": [[10, 5, 1, "", "count"], [10, 5, 1, "", "key"], [10, 5, 1, "", "next"]], "tryalgo.strongly_connected_components": [[10, 4, 1, "", "kosaraju"], [10, 4, 1, "", "reverse"], [10, 4, 1, "", "tarjan"], [10, 4, 1, "", "tarjan_recursif"]], "tryalgo.subsetsum": [[10, 4, 1, "", "coin_change"], [10, 4, 1, "", "subset_sum"]], "tryalgo.subsetsum_divide": [[10, 4, 1, "", "part_sum"], [10, 4, 1, "", "part_sum2"], [10, 4, 1, "", "subset_sum"], [10, 4, 1, "", "subset_sum2"]], "tryalgo.sudoku": [[10, 4, 1, "", "sudoku"]], "tryalgo.suffix_array": [[10, 4, 1, "", "sort_class"], [10, 4, 1, "", "sort_cyclic_shifts"], [10, 4, 1, "", "suffix_array"]], "tryalgo.three_partition": [[10, 4, 1, "", "three_partition"]], "tryalgo.topological_order": [[10, 4, 1, "", "topological_order"], [10, 4, 1, "", "topological_order_dfs"]], "tryalgo.tortoise_hare": [[10, 4, 1, "", "tortoise_hare"]], "tryalgo.trie": [[10, 4, 1, "", "Trie"], [10, 1, 1, "", "TrieNode"], [10, 4, 1, "", "add"], [10, 4, 1, "", "search"], [10, 4, 1, "", "spell_check"]], "tryalgo.two_sat": [[10, 4, 1, "", "two_sat"]], "tryalgo.union_rectangles": [[10, 1, 1, "", "CoverQuery"], [10, 4, 1, "", "rectangles_contains_point"], [10, 4, 1, "", "union_intervals"], [10, 4, 1, "", "union_rectangles"], [10, 4, 1, "", "union_rectangles_fast"], [10, 4, 1, "", "union_rectangles_fastest"], [10, 4, 1, "", "union_rectangles_naive"]], "tryalgo.union_rectangles.CoverQuery": [[10, 2, 1, "", "change"], [10, 2, 1, "", "cover"]], "tryalgo.windows_k_distinct": [[10, 4, 1, "", "windows_k_distinct"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"countdown": 0, "coin": [1, 7], "chang": [1, 7], "galleri": 2, "exampl": 2, "comput": [3, 8], "time": [3, 8], "content": [4, 10], "librari": 4, "basic": 4, "algorithm": 4, "data": 4, "structur": 4, "string": [4, 7], "sequenc": [4, 10], "arrai": 4, "interv": 4, "graph": [4, 10], "cycl": 4, "shortest": 4, "path": 4, "match": 4, "flow": 4, "relat": 4, "tree": 4, "set": 4, "geometri": 4, "arithmet": 4, "backtrack": 4, "last": 4, "word": 4, "welcom": 5, "tryalgo": [5, 9, 10], "": 5, "document": 5, "instal": 6, "With": 6, "pip": 6, "from": 6, "pypi": 6, "quick": 7, "start": 7, "longest": 7, "palindrom": 7, "substr": 7, "pathfind": 7, "packag": 10, "submodul": 10, "pc_tree": 10, "modul": 10, "a_star": 10, "anagram": 10, "arithm": 10, "arithm_expr_ev": 10, "arithm_expr_target": 10, "bellman_ford": 10, "bf": 10, "biconnected_compon": 10, "binary_search": 10, "bipartite_match": 10, "bipartite_vertex_cov": 10, "closest_point": 10, "closest_valu": 10, "convex_hul": 10, "dancing_link": 10, "df": 10, "dijkstra": 10, "dilworth": 10, "dinic": 10, "dist_grid": 10, "dyn_prog_trick": 10, "edmonds_karp": 10, "eulerian_tour": 10, "fast_exponenti": 10, "fenwick": 10, "fft": 10, "floyd_warshal": 10, "ford_fulkerson": 10, "freivald": 10, "gale_shaplei": 10, "gauss_jordan": 10, "graph01": 10, "hamiltonian_cycl": 10, "horn_sat": 10, "huffman": 10, "interval_cov": 10, "interval_tre": 10, "intervals_union": 10, "karatsuba": 10, "knapsack": 10, "knuth_morris_pratt": 10, "kruskal": 10, "kuhn_munkr": 10, "kuhn_munkres_n4": 10, "laser_mirror": 10, "left_right_invers": 10, "levenshtein": 10, "longest_common_subsequ": 10, "longest_increasing_subsequ": 10, "lowest_common_ancestor": 10, "major": 10, "manach": 10, "matrix_chain_mult": 10, "max_interval_intersec": 10, "merge_ordered_list": 10, "min_mean_cycl": 10, "next_permut": 10, "our_heap": 10, "our_queu": 10, "our_std": 10, "pareto": 10, "partition_refin": 10, "permutation_rank": 10, "polygon": 10, "predictive_text": 10, "prime": 10, "rabin_karp": 10, "range_minimum_queri": 10, "rectangles_from_grid": 10, "rectangles_from_histogram": 10, "rectangles_from_point": 10, "roman_numb": 10, "scalar": 10, "shortest_cycl": 10, "skip_list": 10, "strongly_connected_compon": 10, "subsetsum": 10, "subsetsum_divid": 10, "sudoku": 10, "suffix_arrai": 10, "three_partit": 10, "topological_ord": 10, "tortoise_har": 10, "trie": 10, "two_sat": 10, "union_rectangl": 10, "windows_k_distinct": 10}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Countdown": [[0, "countdown"]], "Coin change": [[1, "coin-change"], [7, "coin-change"]], "Gallery of examples": [[2, "gallery-of-examples"]], "Computation times": [[3, "computation-times"], [8, "computation-times"]], "Content of the library": [[4, "content-of-the-library"]], "Basic algorithms and data structures": [[4, "basic-algorithms-and-data-structures"]], "Strings": [[4, "strings"]], "Sequences and Arrays": [[4, "sequences-and-arrays"]], "Intervals": [[4, "intervals"]], "Graphs": [[4, "graphs"]], "Cycles": [[4, "cycles"]], "Shortest paths": [[4, "shortest-paths"]], "Matching, flows and related": [[4, "matching-flows-and-related"]], "Trees": [[4, "trees"]], "Sets": [[4, "sets"]], "Geometry": [[4, "geometry"]], "Arithmetic": [[4, "arithmetic"]], "Backtracking": [[4, "backtracking"]], "Last words": [[4, "last-words"]], "Welcome to tryalgo\u2019s documentation!": [[5, "welcome-to-tryalgo-s-documentation"]], "Installation": [[6, "installation"]], "With PIP": [[6, "with-pip"]], "From PyPI": [[6, "from-pypi"]], "Quick start": [[7, "quick-start"]], "Longest palindrome substring of a string": [[7, "longest-palindrome-substring-of-a-string"]], "Pathfinding": [[7, "pathfinding"]], "tryalgo": [[9, "tryalgo"]], "tryalgo package": [[10, "tryalgo-package"]], "Submodules": [[10, "submodules"]], "tryalgo.PC_tree module": [[10, "module-tryalgo.PC_tree"]], "tryalgo.Sequence module": [[10, "module-tryalgo.Sequence"]], "tryalgo.a_star module": [[10, "module-tryalgo.a_star"]], "tryalgo.anagrams module": [[10, "module-tryalgo.anagrams"]], "tryalgo.arithm module": [[10, "module-tryalgo.arithm"]], "tryalgo.arithm_expr_eval module": [[10, "module-tryalgo.arithm_expr_eval"]], "tryalgo.arithm_expr_target module": [[10, "module-tryalgo.arithm_expr_target"]], "tryalgo.bellman_ford module": [[10, "module-tryalgo.bellman_ford"]], "tryalgo.bfs module": [[10, "module-tryalgo.bfs"]], "tryalgo.biconnected_components module": [[10, "module-tryalgo.biconnected_components"]], "tryalgo.binary_search module": [[10, "module-tryalgo.binary_search"]], "tryalgo.bipartite_matching module": [[10, "module-tryalgo.bipartite_matching"]], "tryalgo.bipartite_vertex_cover module": [[10, "module-tryalgo.bipartite_vertex_cover"]], "tryalgo.closest_points module": [[10, "module-tryalgo.closest_points"]], "tryalgo.closest_values module": [[10, "module-tryalgo.closest_values"]], "tryalgo.convex_hull module": [[10, "module-tryalgo.convex_hull"]], "tryalgo.dancing_links module": [[10, "module-tryalgo.dancing_links"]], "tryalgo.dfs module": [[10, "module-tryalgo.dfs"]], "tryalgo.dijkstra module": [[10, "module-tryalgo.dijkstra"]], "tryalgo.dilworth module": [[10, "module-tryalgo.dilworth"]], "tryalgo.dinic module": [[10, "module-tryalgo.dinic"]], "tryalgo.dist_grid module": [[10, "module-tryalgo.dist_grid"]], "tryalgo.dyn_prog_tricks module": [[10, "module-tryalgo.dyn_prog_tricks"]], "tryalgo.edmonds_karp module": [[10, "module-tryalgo.edmonds_karp"]], "tryalgo.eulerian_tour module": [[10, "module-tryalgo.eulerian_tour"]], "tryalgo.fast_exponentiation module": [[10, "module-tryalgo.fast_exponentiation"]], "tryalgo.fenwick module": [[10, "module-tryalgo.fenwick"]], "tryalgo.fft module": [[10, "module-tryalgo.fft"]], "tryalgo.floyd_warshall module": [[10, "module-tryalgo.floyd_warshall"]], "tryalgo.ford_fulkerson module": [[10, "module-tryalgo.ford_fulkerson"]], "tryalgo.freivalds module": [[10, "module-tryalgo.freivalds"]], "tryalgo.gale_shapley module": [[10, "module-tryalgo.gale_shapley"]], "tryalgo.gauss_jordan module": [[10, "module-tryalgo.gauss_jordan"]], "tryalgo.graph module": [[10, "module-tryalgo.graph"]], "tryalgo.graph01 module": [[10, "module-tryalgo.graph01"]], "tryalgo.hamiltonian_cycle module": [[10, "module-tryalgo.hamiltonian_cycle"]], "tryalgo.horn_sat module": [[10, "module-tryalgo.horn_sat"]], "tryalgo.huffman module": [[10, "module-tryalgo.huffman"]], "tryalgo.interval_cover module": [[10, "module-tryalgo.interval_cover"]], "tryalgo.interval_tree module": [[10, "module-tryalgo.interval_tree"]], "tryalgo.intervals_union module": [[10, "module-tryalgo.intervals_union"]], "tryalgo.karatsuba module": [[10, "module-tryalgo.karatsuba"]], "tryalgo.knapsack module": [[10, "module-tryalgo.knapsack"]], "tryalgo.knuth_morris_pratt module": [[10, "module-tryalgo.knuth_morris_pratt"]], "tryalgo.kruskal module": [[10, "module-tryalgo.kruskal"]], "tryalgo.kuhn_munkres module": [[10, "module-tryalgo.kuhn_munkres"]], "tryalgo.kuhn_munkres_n4 module": [[10, "module-tryalgo.kuhn_munkres_n4"]], "tryalgo.laser_mirrors module": [[10, "module-tryalgo.laser_mirrors"]], "tryalgo.left_right_inversions module": [[10, "module-tryalgo.left_right_inversions"]], "tryalgo.levenshtein module": [[10, "module-tryalgo.levenshtein"]], "tryalgo.longest_common_subsequence module": [[10, "module-tryalgo.longest_common_subsequence"]], "tryalgo.longest_increasing_subsequence module": [[10, "module-tryalgo.longest_increasing_subsequence"]], "tryalgo.lowest_common_ancestor module": [[10, "module-tryalgo.lowest_common_ancestor"]], "tryalgo.majority module": [[10, "module-tryalgo.majority"]], "tryalgo.manacher module": [[10, "module-tryalgo.manacher"]], "tryalgo.matrix_chain_mult module": [[10, "module-tryalgo.matrix_chain_mult"]], "tryalgo.max_interval_intersec module": [[10, "module-tryalgo.max_interval_intersec"]], "tryalgo.merge_ordered_lists module": [[10, "module-tryalgo.merge_ordered_lists"]], "tryalgo.min_mean_cycle module": [[10, "module-tryalgo.min_mean_cycle"]], "tryalgo.next_permutation module": [[10, "module-tryalgo.next_permutation"]], "tryalgo.our_heap module": [[10, "module-tryalgo.our_heap"]], "tryalgo.our_queue module": [[10, "module-tryalgo.our_queue"]], "tryalgo.our_std module": [[10, "module-tryalgo.our_std"]], "tryalgo.pareto module": [[10, "module-tryalgo.pareto"]], "tryalgo.partition_refinement module": [[10, "module-tryalgo.partition_refinement"]], "tryalgo.permutation_rank module": [[10, "module-tryalgo.permutation_rank"]], "tryalgo.polygon module": [[10, "module-tryalgo.polygon"]], "tryalgo.predictive_text module": [[10, "module-tryalgo.predictive_text"]], "tryalgo.primes module": [[10, "module-tryalgo.primes"]], "tryalgo.rabin_karp module": [[10, "module-tryalgo.rabin_karp"]], "tryalgo.range_minimum_query module": [[10, "module-tryalgo.range_minimum_query"]], "tryalgo.rectangles_from_grid module": [[10, "module-tryalgo.rectangles_from_grid"]], "tryalgo.rectangles_from_histogram module": [[10, "module-tryalgo.rectangles_from_histogram"]], "tryalgo.rectangles_from_points module": [[10, "module-tryalgo.rectangles_from_points"]], "tryalgo.roman_numbers module": [[10, "module-tryalgo.roman_numbers"]], "tryalgo.scalar module": [[10, "module-tryalgo.scalar"]], "tryalgo.shortest_cycle module": [[10, "module-tryalgo.shortest_cycle"]], "tryalgo.skip_list module": [[10, "module-tryalgo.skip_list"]], "tryalgo.strongly_connected_components module": [[10, "module-tryalgo.strongly_connected_components"]], "tryalgo.subsetsum module": [[10, "module-tryalgo.subsetsum"]], "tryalgo.subsetsum_divide module": [[10, "module-tryalgo.subsetsum_divide"]], "tryalgo.sudoku module": [[10, "module-tryalgo.sudoku"]], "tryalgo.suffix_array module": [[10, "module-tryalgo.suffix_array"]], "tryalgo.three_partition module": [[10, "module-tryalgo.three_partition"]], "tryalgo.topological_order module": [[10, "module-tryalgo.topological_order"]], "tryalgo.tortoise_hare module": [[10, "module-tryalgo.tortoise_hare"]], "tryalgo.trie module": [[10, "module-tryalgo.trie"]], "tryalgo.two_sat module": [[10, "module-tryalgo.two_sat"]], "tryalgo.union_rectangles module": [[10, "module-tryalgo.union_rectangles"]], "tryalgo.windows_k_distinct module": [[10, "module-tryalgo.windows_k_distinct"]], "Module contents": [[10, "module-tryalgo"]]}, "indexentries": {"abstractskiplist (class in tryalgo.skip_list)": [[10, "tryalgo.skip_list.AbstractSkipList"]], "c_node (class in tryalgo.pc_tree)": [[10, "tryalgo.PC_tree.C_node"]], "coverquery (class in tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.CoverQuery"]], "fenwick (class in tryalgo.fenwick)": [[10, "tryalgo.fenwick.Fenwick"]], "fenwickmin (class in tryalgo.fenwick)": [[10, "tryalgo.fenwick.FenwickMin"]], "graphnamedvertices (class in tryalgo.graph)": [[10, "tryalgo.graph.GraphNamedVertices"]], "infeasible": [[10, "tryalgo.PC_tree.Infeasible"]], "lazysegmenttree (class in tryalgo.range_minimum_query)": [[10, "tryalgo.range_minimum_query.LazySegmentTree"]], "leaf (class in tryalgo.pc_tree)": [[10, "tryalgo.PC_tree.Leaf"]], "lowestcommonancestorrmq (class in tryalgo.lowest_common_ancestor)": [[10, "tryalgo.lowest_common_ancestor.LowestCommonAncestorRMQ"]], "lowestcommonancestorshortcuts (class in tryalgo.lowest_common_ancestor)": [[10, "tryalgo.lowest_common_ancestor.LowestCommonAncestorShortcuts"]], "node (class in tryalgo.pc_tree)": [[10, "tryalgo.PC_tree.Node"]], "ourheap (class in tryalgo.our_heap)": [[10, "tryalgo.our_heap.OurHeap"]], "ourqueue (class in tryalgo.our_queue)": [[10, "tryalgo.our_queue.OurQueue"]], "pc_tree (class in tryalgo.pc_tree)": [[10, "tryalgo.PC_tree.PC_tree"]], "p_node (class in tryalgo.pc_tree)": [[10, "tryalgo.PC_tree.P_node"]], "partitionrefinement (class in tryalgo.partition_refinement)": [[10, "tryalgo.partition_refinement.PartitionRefinement"]], "rangeminquery (class in tryalgo.range_minimum_query)": [[10, "tryalgo.range_minimum_query.RangeMinQuery"]], "sequence (class in tryalgo.sequence)": [[10, "tryalgo.Sequence.Sequence"]], "sequenceerror": [[10, "tryalgo.Sequence.SequenceError"]], "sorteddict (class in tryalgo.skip_list)": [[10, "tryalgo.skip_list.SortedDict"]], "sorteddict.node (class in tryalgo.skip_list)": [[10, "tryalgo.skip_list.SortedDict.Node"]], "sortedset (class in tryalgo.skip_list)": [[10, "tryalgo.skip_list.SortedSet"]], "sortedset.node (class in tryalgo.skip_list)": [[10, "tryalgo.skip_list.SortedSet.Node"]], "trie() (in module tryalgo.trie)": [[10, "tryalgo.trie.Trie"]], "trienode (class in tryalgo.trie)": [[10, "tryalgo.trie.TrieNode"]], "unionfind (class in tryalgo.kruskal)": [[10, "tryalgo.kruskal.UnionFind"]], "a_star() (in module tryalgo.a_star)": [[10, "tryalgo.a_star.a_star"]], "add() (in module tryalgo.trie)": [[10, "tryalgo.trie.add"]], "add() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.add"]], "add() (tryalgo.fenwick.fenwick method)": [[10, "tryalgo.fenwick.Fenwick.add"]], "add() (tryalgo.range_minimum_query.lazysegmenttree method)": [[10, "tryalgo.range_minimum_query.LazySegmentTree.add"]], "add() (tryalgo.skip_list.sortedset method)": [[10, "tryalgo.skip_list.SortedSet.add"]], "add_arc() (tryalgo.graph.graphnamedvertices method)": [[10, "tryalgo.graph.GraphNamedVertices.add_arc"]], "add_edge() (tryalgo.graph.graphnamedvertices method)": [[10, "tryalgo.graph.GraphNamedVertices.add_edge"]], "add_node() (tryalgo.graph.graphnamedvertices method)": [[10, "tryalgo.graph.GraphNamedVertices.add_node"]], "add_poly() (in module tryalgo.karatsuba)": [[10, "tryalgo.karatsuba.add_poly"]], "add_reverse_arcs() (in module tryalgo.graph)": [[10, "tryalgo.graph.add_reverse_arcs"]], "anagrams() (in module tryalgo.anagrams)": [[10, "tryalgo.anagrams.anagrams"]], "andrew() (in module tryalgo.convex_hull)": [[10, "tryalgo.convex_hull.andrew"]], "area() (in module tryalgo.polygon)": [[10, "tryalgo.polygon.area"]], "arithm_expr_eval() (in module tryalgo.arithm_expr_eval)": [[10, "tryalgo.arithm_expr_eval.arithm_expr_eval"]], "arithm_expr_parse() (in module tryalgo.arithm_expr_eval)": [[10, "tryalgo.arithm_expr_eval.arithm_expr_parse"]], "arithm_expr_target() (in module tryalgo.arithm_expr_target)": [[10, "tryalgo.arithm_expr_target.arithm_expr_target"]], "attach() (tryalgo.pc_tree.leaf method)": [[10, "tryalgo.PC_tree.Leaf.attach"]], "attach() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.attach"]], "attach_neighbors() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.attach_neighbors"]], "bellman_ford() (in module tryalgo.bellman_ford)": [[10, "tryalgo.bellman_ford.bellman_ford"]], "bellman_ford2() (in module tryalgo.bellman_ford)": [[10, "tryalgo.bellman_ford.bellman_ford2"]], "bezout() (in module tryalgo.arithm)": [[10, "tryalgo.arithm.bezout"]], "bfs() (in module tryalgo.bfs)": [[10, "tryalgo.bfs.bfs"]], "bfs_implicit() (in module tryalgo.bfs)": [[10, "tryalgo.bfs.bfs_implicit"]], "binom() (in module tryalgo.arithm)": [[10, "tryalgo.arithm.binom"]], "binom_modulo() (in module tryalgo.arithm)": [[10, "tryalgo.arithm.binom_modulo"]], "bipartite_vertex_cover() (in module tryalgo.bipartite_vertex_cover)": [[10, "tryalgo.bipartite_vertex_cover.bipartite_vertex_cover"]], "change() (tryalgo.union_rectangles.coverquery method)": [[10, "tryalgo.union_rectangles.CoverQuery.change"]], "clean() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.clean"]], "clean() (tryalgo.pc_tree.leaf method)": [[10, "tryalgo.PC_tree.Leaf.clean"]], "clean() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.clean"]], "clean() (tryalgo.pc_tree.p_node method)": [[10, "tryalgo.PC_tree.P_node.clean"]], "closest_points() (in module tryalgo.closest_points)": [[10, "tryalgo.closest_points.closest_points"]], "closest_values() (in module tryalgo.closest_values)": [[10, "tryalgo.closest_values.closest_values"]], "coin_change() (in module tryalgo.subsetsum)": [[10, "tryalgo.subsetsum.coin_change"]], "continuous_binary_search() (in module tryalgo.binary_search)": [[10, "tryalgo.binary_search.continuous_binary_search"]], "convert() (in module tryalgo.next_permutation)": [[10, "tryalgo.next_permutation.convert"]], "count (tryalgo.skip_list.sorteddict.node attribute)": [[10, "tryalgo.skip_list.SortedDict.Node.count"]], "count (tryalgo.skip_list.sortedset.node attribute)": [[10, "tryalgo.skip_list.SortedSet.Node.count"]], "cover() (tryalgo.union_rectangles.coverquery method)": [[10, "tryalgo.union_rectangles.CoverQuery.cover"]], "cut_nodes_edges() (in module tryalgo.biconnected_components)": [[10, "tryalgo.biconnected_components.cut_nodes_edges"]], "cut_nodes_edges2() (in module tryalgo.biconnected_components)": [[10, "tryalgo.biconnected_components.cut_nodes_edges2"]], "dancing_links() (in module tryalgo.dancing_links)": [[10, "tryalgo.dancing_links.dancing_links"]], "decode_root_matrix_to_level() (in module tryalgo.dyn_prog_tricks)": [[10, "tryalgo.dyn_prog_tricks.decode_root_matrix_to_level"]], "detach() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.detach"]], "detach() (tryalgo.pc_tree.leaf method)": [[10, "tryalgo.PC_tree.Leaf.detach"]], "detach() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.detach"]], "detach_bilateral() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.detach_bilateral"]], "dfs_grid() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.dfs_grid"]], "dfs_grid_recursive() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.dfs_grid_recursive"]], "dfs_iterative() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.dfs_iterative"]], "dfs_recursive() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.dfs_recursive"]], "dfs_tree() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.dfs_tree"]], "dictdict_to_listdict() (in module tryalgo.graph)": [[10, "tryalgo.graph.dictdict_to_listdict"]], "dijkstra() (in module tryalgo.dijkstra)": [[10, "tryalgo.dijkstra.dijkstra"]], "dijkstra_update_heap() (in module tryalgo.dijkstra)": [[10, "tryalgo.dijkstra.dijkstra_update_heap"]], "dilworth() (in module tryalgo.dilworth)": [[10, "tryalgo.dilworth.dilworth"]], "dinic() (in module tryalgo.dinic)": [[10, "tryalgo.dinic.dinic"]], "discrete_binary_search() (in module tryalgo.binary_search)": [[10, "tryalgo.binary_search.discrete_binary_search"]], "dist() (in module tryalgo.kruskal)": [[10, "tryalgo.kruskal.dist"]], "dist01() (in module tryalgo.graph01)": [[10, "tryalgo.graph01.dist01"]], "dist_grid() (in module tryalgo.dist_grid)": [[10, "tryalgo.dist_grid.dist_grid"]], "down() (tryalgo.our_heap.ourheap method)": [[10, "tryalgo.our_heap.OurHeap.down"]], "dyn_prog_monge() (in module tryalgo.dyn_prog_tricks)": [[10, "tryalgo.dyn_prog_tricks.dyn_prog_Monge"]], "edmonds_karp() (in module tryalgo.edmonds_karp)": [[10, "tryalgo.edmonds_karp.edmonds_karp"]], "eratosthene() (in module tryalgo.primes)": [[10, "tryalgo.primes.eratosthene"]], "eulerian_tour_directed() (in module tryalgo.eulerian_tour)": [[10, "tryalgo.eulerian_tour.eulerian_tour_directed"]], "eulerian_tour_undirected() (in module tryalgo.eulerian_tour)": [[10, "tryalgo.eulerian_tour.eulerian_tour_undirected"]], "eval_poly() (in module tryalgo.karatsuba)": [[10, "tryalgo.karatsuba.eval_poly"]], "extract() (in module tryalgo.huffman)": [[10, "tryalgo.huffman.extract"]], "extract_path() (in module tryalgo.graph)": [[10, "tryalgo.graph.extract_path"]], "fast_exponentiation() (in module tryalgo.fast_exponentiation)": [[10, "tryalgo.fast_exponentiation.fast_exponentiation"]], "fast_exponentiation2() (in module tryalgo.fast_exponentiation)": [[10, "tryalgo.fast_exponentiation.fast_exponentiation2"]], "fft() (in module tryalgo.fft)": [[10, "tryalgo.fft.fft"]], "find() (tryalgo.kruskal.unionfind method)": [[10, "tryalgo.kruskal.UnionFind.find"]], "find() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.find"]], "find_cycle() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.find_cycle"]], "flip() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.flip"]], "floyd_warshall() (in module tryalgo.floyd_warshall)": [[10, "tryalgo.floyd_warshall.floyd_warshall"]], "floyd_warshall2() (in module tryalgo.floyd_warshall)": [[10, "tryalgo.floyd_warshall.floyd_warshall2"]], "ford_fulkerson() (in module tryalgo.ford_fulkerson)": [[10, "tryalgo.ford_fulkerson.ford_fulkerson"]], "freivalds() (in module tryalgo.freivalds)": [[10, "tryalgo.freivalds.freivalds"]], "frontier() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.frontier"]], "frontier() (tryalgo.pc_tree.leaf method)": [[10, "tryalgo.PC_tree.Leaf.frontier"]], "frontier() (tryalgo.pc_tree.pc_tree method)": [[10, "tryalgo.PC_tree.PC_tree.frontier"]], "frontier() (tryalgo.pc_tree.p_node method)": [[10, "tryalgo.PC_tree.P_node.frontier"]], "gale_shapley() (in module tryalgo.gale_shapley)": [[10, "tryalgo.gale_shapley.gale_shapley"]], "gauss_jordan() (in module tryalgo.gauss_jordan)": [[10, "tryalgo.gauss_jordan.gauss_jordan"]], "get() (tryalgo.fenwick.fenwick method)": [[10, "tryalgo.fenwick.Fenwick.get"]], "getkth() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.getkth"]], "gries_misra() (in module tryalgo.primes)": [[10, "tryalgo.primes.gries_misra"]], "hamiltonian_cycle() (in module tryalgo.hamiltonian_cycle)": [[10, "tryalgo.hamiltonian_cycle.hamiltonian_cycle"]], "horn_sat() (in module tryalgo.horn_sat)": [[10, "tryalgo.horn_sat.horn_sat"]], "huffman() (in module tryalgo.huffman)": [[10, "tryalgo.huffman.huffman"]], "insert() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.insert"]], "insertafter() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.insertAfter"]], "insertbefore() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.insertBefore"]], "int2roman() (in module tryalgo.roman_numbers)": [[10, "tryalgo.roman_numbers.int2roman"]], "intervaladd() (tryalgo.fenwick.fenwick method)": [[10, "tryalgo.fenwick.Fenwick.intervalAdd"]], "intervalsum() (tryalgo.fenwick.fenwick method)": [[10, "tryalgo.fenwick.Fenwick.intervalSum"]], "interval_cover() (in module tryalgo.interval_cover)": [[10, "tryalgo.interval_cover.interval_cover"]], "interval_tree() (in module tryalgo.interval_tree)": [[10, "tryalgo.interval_tree.interval_tree"]], "intervals_containing() (in module tryalgo.interval_tree)": [[10, "tryalgo.interval_tree.intervals_containing"]], "intervals_union() (in module tryalgo.intervals_union)": [[10, "tryalgo.intervals_union.intervals_union"]], "inv() (in module tryalgo.arithm)": [[10, "tryalgo.arithm.inv"]], "inv_fft() (in module tryalgo.fft)": [[10, "tryalgo.fft.inv_fft"]], "is_bipartite() (in module tryalgo.dfs)": [[10, "tryalgo.dfs.is_bipartite"]], "is_eulerian_tour_directed() (in module tryalgo.eulerian_tour)": [[10, "tryalgo.eulerian_tour.is_eulerian_tour_directed"]], "is_eulerian_tour_undirected() (in module tryalgo.eulerian_tour)": [[10, "tryalgo.eulerian_tour.is_eulerian_tour_undirected"]], "is_full() (tryalgo.pc_tree.leaf method)": [[10, "tryalgo.PC_tree.Leaf.is_full"]], "is_full() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.is_full"]], "is_partial() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.is_partial"]], "is_simple() (in module tryalgo.polygon)": [[10, "tryalgo.polygon.is_simple"]], "key (tryalgo.skip_list.sorteddict.node attribute)": [[10, "tryalgo.skip_list.SortedDict.Node.key"]], "key (tryalgo.skip_list.sortedset.node attribute)": [[10, "tryalgo.skip_list.SortedSet.Node.key"]], "key() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.key"]], "keys() (tryalgo.skip_list.sorteddict method)": [[10, "tryalgo.skip_list.SortedDict.keys"]], "knapsack() (in module tryalgo.knapsack)": [[10, "tryalgo.knapsack.knapsack"]], "knapsack2() (in module tryalgo.knapsack)": [[10, "tryalgo.knapsack.knapsack2"]], "knuth_morris_pratt() (in module tryalgo.knuth_morris_pratt)": [[10, "tryalgo.knuth_morris_pratt.knuth_morris_pratt"]], "kosaraju() (in module tryalgo.strongly_connected_components)": [[10, "tryalgo.strongly_connected_components.kosaraju"]], "kruskal() (in module tryalgo.kruskal)": [[10, "tryalgo.kruskal.kruskal"]], "kuhn_munkres() (in module tryalgo.kuhn_munkres)": [[10, "tryalgo.kuhn_munkres.kuhn_munkres"]], "kuhn_munkres() (in module tryalgo.kuhn_munkres_n4)": [[10, "tryalgo.kuhn_munkres_n4.kuhn_munkres"]], "laser_mirrors() (in module tryalgo.laser_mirrors)": [[10, "tryalgo.laser_mirrors.laser_mirrors"]], "lastkey() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.lastKey"]], "left_right_inversions() (in module tryalgo.left_right_inversions)": [[10, "tryalgo.left_right_inversions.left_right_inversions"]], "levenshtein() (in module tryalgo.levenshtein)": [[10, "tryalgo.levenshtein.levenshtein"]], "listdict_to_listlist_and_matrix() (in module tryalgo.graph)": [[10, "tryalgo.graph.listdict_to_listlist_and_matrix"]], "listlist_and_matrix_to_listdict() (in module tryalgo.graph)": [[10, "tryalgo.graph.listlist_and_matrix_to_listdict"]], "log2ceil() (in module tryalgo.lowest_common_ancestor)": [[10, "tryalgo.lowest_common_ancestor.log2ceil"]], "log2floor() (in module tryalgo.lowest_common_ancestor)": [[10, "tryalgo.lowest_common_ancestor.log2floor"]], "longest_common_subsequence() (in module tryalgo.longest_common_subsequence)": [[10, "tryalgo.longest_common_subsequence.longest_common_subsequence"]], "longest_increasing_subsequence() (in module tryalgo.longest_increasing_subsequence)": [[10, "tryalgo.longest_increasing_subsequence.longest_increasing_subsequence"]], "majority() (in module tryalgo.majority)": [[10, "tryalgo.majority.majority"]], "make_flow_labels() (in module tryalgo.graph)": [[10, "tryalgo.graph.make_flow_labels"]], "manacher() (in module tryalgo.manacher)": [[10, "tryalgo.manacher.manacher"]], "matches() (in module tryalgo.rabin_karp)": [[10, "tryalgo.rabin_karp.matches"]], "matrix_chain_mult() (in module tryalgo.matrix_chain_mult)": [[10, "tryalgo.matrix_chain_mult.matrix_chain_mult"]], "matrix_mult_opt_order() (in module tryalgo.matrix_chain_mult)": [[10, "tryalgo.matrix_chain_mult.matrix_mult_opt_order"]], "matrix_to_listlist() (in module tryalgo.graph)": [[10, "tryalgo.graph.matrix_to_listlist"]], "max() (tryalgo.range_minimum_query.lazysegmenttree method)": [[10, "tryalgo.range_minimum_query.LazySegmentTree.max"]], "max_bipartite_matching() (in module tryalgo.bipartite_matching)": [[10, "tryalgo.bipartite_matching.max_bipartite_matching"]], "max_interval_intersec() (in module tryalgo.max_interval_intersec)": [[10, "tryalgo.max_interval_intersec.max_interval_intersec"]], "maximum_border_length() (in module tryalgo.knuth_morris_pratt)": [[10, "tryalgo.knuth_morris_pratt.maximum_border_length"]], "merge() (in module tryalgo.merge_ordered_lists)": [[10, "tryalgo.merge_ordered_lists.merge"]], "min() (tryalgo.range_minimum_query.lazysegmenttree method)": [[10, "tryalgo.range_minimum_query.LazySegmentTree.min"]], "min_mean_cycle() (in module tryalgo.min_mean_cycle)": [[10, "tryalgo.min_mean_cycle.min_mean_cycle"]], "min_scalar_prod() (in module tryalgo.scalar)": [[10, "tryalgo.scalar.min_scalar_prod"]], "module": [[10, "module-tryalgo"], [10, "module-tryalgo.PC_tree"], [10, "module-tryalgo.Sequence"], [10, "module-tryalgo.a_star"], [10, "module-tryalgo.anagrams"], [10, "module-tryalgo.arithm"], [10, "module-tryalgo.arithm_expr_eval"], [10, "module-tryalgo.arithm_expr_target"], [10, "module-tryalgo.bellman_ford"], [10, "module-tryalgo.bfs"], [10, "module-tryalgo.biconnected_components"], [10, "module-tryalgo.binary_search"], [10, "module-tryalgo.bipartite_matching"], [10, "module-tryalgo.bipartite_vertex_cover"], [10, "module-tryalgo.closest_points"], [10, "module-tryalgo.closest_values"], [10, "module-tryalgo.convex_hull"], [10, "module-tryalgo.dancing_links"], [10, "module-tryalgo.dfs"], [10, "module-tryalgo.dijkstra"], [10, "module-tryalgo.dilworth"], [10, "module-tryalgo.dinic"], [10, "module-tryalgo.dist_grid"], [10, "module-tryalgo.dyn_prog_tricks"], [10, "module-tryalgo.edmonds_karp"], [10, "module-tryalgo.eulerian_tour"], [10, "module-tryalgo.fast_exponentiation"], [10, "module-tryalgo.fenwick"], [10, "module-tryalgo.fft"], [10, "module-tryalgo.floyd_warshall"], [10, "module-tryalgo.ford_fulkerson"], [10, "module-tryalgo.freivalds"], [10, "module-tryalgo.gale_shapley"], [10, "module-tryalgo.gauss_jordan"], [10, "module-tryalgo.graph"], [10, "module-tryalgo.graph01"], [10, "module-tryalgo.hamiltonian_cycle"], [10, "module-tryalgo.horn_sat"], [10, "module-tryalgo.huffman"], [10, "module-tryalgo.interval_cover"], [10, "module-tryalgo.interval_tree"], [10, "module-tryalgo.intervals_union"], [10, "module-tryalgo.karatsuba"], [10, "module-tryalgo.knapsack"], [10, "module-tryalgo.knuth_morris_pratt"], [10, "module-tryalgo.kruskal"], [10, "module-tryalgo.kuhn_munkres"], [10, "module-tryalgo.kuhn_munkres_n4"], [10, "module-tryalgo.laser_mirrors"], [10, "module-tryalgo.left_right_inversions"], [10, "module-tryalgo.levenshtein"], [10, "module-tryalgo.longest_common_subsequence"], [10, "module-tryalgo.longest_increasing_subsequence"], [10, "module-tryalgo.lowest_common_ancestor"], [10, "module-tryalgo.majority"], [10, "module-tryalgo.manacher"], [10, "module-tryalgo.matrix_chain_mult"], [10, "module-tryalgo.max_interval_intersec"], [10, "module-tryalgo.merge_ordered_lists"], [10, "module-tryalgo.min_mean_cycle"], [10, "module-tryalgo.next_permutation"], [10, "module-tryalgo.our_heap"], [10, "module-tryalgo.our_queue"], [10, "module-tryalgo.our_std"], [10, "module-tryalgo.pareto"], [10, "module-tryalgo.partition_refinement"], [10, "module-tryalgo.permutation_rank"], [10, "module-tryalgo.polygon"], [10, "module-tryalgo.predictive_text"], [10, "module-tryalgo.primes"], [10, "module-tryalgo.rabin_karp"], [10, "module-tryalgo.range_minimum_query"], [10, "module-tryalgo.rectangles_from_grid"], [10, "module-tryalgo.rectangles_from_histogram"], [10, "module-tryalgo.rectangles_from_points"], [10, "module-tryalgo.roman_numbers"], [10, "module-tryalgo.scalar"], [10, "module-tryalgo.shortest_cycle"], [10, "module-tryalgo.skip_list"], [10, "module-tryalgo.strongly_connected_components"], [10, "module-tryalgo.subsetsum"], [10, "module-tryalgo.subsetsum_divide"], [10, "module-tryalgo.sudoku"], [10, "module-tryalgo.suffix_array"], [10, "module-tryalgo.three_partition"], [10, "module-tryalgo.topological_order"], [10, "module-tryalgo.tortoise_hare"], [10, "module-tryalgo.trie"], [10, "module-tryalgo.two_sat"], [10, "module-tryalgo.union_rectangles"], [10, "module-tryalgo.windows_k_distinct"]], "mul_poly() (in module tryalgo.karatsuba)": [[10, "tryalgo.karatsuba.mul_poly"]], "mul_poly_fft() (in module tryalgo.fft)": [[10, "tryalgo.fft.mul_poly_fft"]], "next (tryalgo.skip_list.sorteddict.node attribute)": [[10, "tryalgo.skip_list.SortedDict.Node.next"]], "next (tryalgo.skip_list.sortedset.node attribute)": [[10, "tryalgo.skip_list.SortedSet.Node.next"]], "nextkey() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.nextKey"]], "nextnode() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.nextNode"]], "next_permutation() (in module tryalgo.next_permutation)": [[10, "tryalgo.next_permutation.next_permutation"]], "opt_bin_search_tree1() (in module tryalgo.dyn_prog_tricks)": [[10, "tryalgo.dyn_prog_tricks.opt_bin_search_tree1"]], "opt_bin_search_tree2() (in module tryalgo.dyn_prog_tricks)": [[10, "tryalgo.dyn_prog_tricks.opt_bin_search_tree2"]], "optimized_binary_search() (in module tryalgo.binary_search)": [[10, "tryalgo.binary_search.optimized_binary_search"]], "optimized_binary_search_lower() (in module tryalgo.binary_search)": [[10, "tryalgo.binary_search.optimized_binary_search_lower"]], "order() (tryalgo.partition_refinement.partitionrefinement method)": [[10, "tryalgo.partition_refinement.PartitionRefinement.order"]], "pad() (in module tryalgo.fft)": [[10, "tryalgo.fft.pad"]], "pareto2d() (in module tryalgo.pareto)": [[10, "tryalgo.pareto.pareto2d"]], "pareto3d() (in module tryalgo.pareto)": [[10, "tryalgo.pareto.pareto3d"]], "part_sum() (in module tryalgo.subsetsum_divide)": [[10, "tryalgo.subsetsum_divide.part_sum"]], "part_sum2() (in module tryalgo.subsetsum_divide)": [[10, "tryalgo.subsetsum_divide.part_sum2"]], "permutation_rank() (in module tryalgo.permutation_rank)": [[10, "tryalgo.permutation_rank.permutation_rank"]], "pgcd() (in module tryalgo.arithm)": [[10, "tryalgo.arithm.pgcd"]], "pop() (tryalgo.our_heap.ourheap method)": [[10, "tryalgo.our_heap.OurHeap.pop"]], "pop() (tryalgo.our_queue.ourqueue method)": [[10, "tryalgo.our_queue.OurQueue.pop"]], "pop() (tryalgo.skip_list.sortedset method)": [[10, "tryalgo.skip_list.SortedSet.pop"]], "powergraph() (in module tryalgo.shortest_cycle)": [[10, "tryalgo.shortest_cycle.powergraph"]], "powerstring_by_border() (in module tryalgo.knuth_morris_pratt)": [[10, "tryalgo.knuth_morris_pratt.powerstring_by_border"]], "powerstring_by_find() (in module tryalgo.knuth_morris_pratt)": [[10, "tryalgo.knuth_morris_pratt.powerstring_by_find"]], "predecessor() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.predecessor"]], "predictive_text() (in module tryalgo.predictive_text)": [[10, "tryalgo.predictive_text.predictive_text"]], "prefixmin() (tryalgo.fenwick.fenwickmin method)": [[10, "tryalgo.fenwick.FenwickMin.prefixMin"]], "prefixsum() (tryalgo.fenwick.fenwick method)": [[10, "tryalgo.fenwick.Fenwick.prefixSum"]], "print_dot() (tryalgo.pc_tree.pc_tree method)": [[10, "tryalgo.PC_tree.PC_tree.print_dot"]], "propose() (in module tryalgo.predictive_text)": [[10, "tryalgo.predictive_text.propose"]], "push() (tryalgo.our_heap.ourheap method)": [[10, "tryalgo.our_heap.OurHeap.push"]], "push() (tryalgo.our_queue.ourqueue method)": [[10, "tryalgo.our_queue.OurQueue.push"]], "query() (tryalgo.lowest_common_ancestor.lowestcommonancestorrmq method)": [[10, "tryalgo.lowest_common_ancestor.LowestCommonAncestorRMQ.query"]], "query() (tryalgo.lowest_common_ancestor.lowestcommonancestorshortcuts method)": [[10, "tryalgo.lowest_common_ancestor.LowestCommonAncestorShortcuts.query"]], "rabin_karp_factor() (in module tryalgo.rabin_karp)": [[10, "tryalgo.rabin_karp.rabin_karp_factor"]], "rabin_karp_matching() (in module tryalgo.rabin_karp)": [[10, "tryalgo.rabin_karp.rabin_karp_matching"]], "random() (in module tryalgo.skip_list)": [[10, "tryalgo.skip_list.random"]], "randomheight() (tryalgo.skip_list.abstractskiplist static method)": [[10, "tryalgo.skip_list.AbstractSkipList.randomHeight"]], "random_eulerien_graph() (in module tryalgo.eulerian_tour)": [[10, "tryalgo.eulerian_tour.random_eulerien_graph"]], "range_min() (tryalgo.range_minimum_query.rangeminquery method)": [[10, "tryalgo.range_minimum_query.RangeMinQuery.range_min"]], "rank_permutation() (in module tryalgo.permutation_rank)": [[10, "tryalgo.permutation_rank.rank_permutation"]], "read() (in module tryalgo.horn_sat)": [[10, "tryalgo.horn_sat.read"]], "read_graph() (in module tryalgo.graph)": [[10, "tryalgo.graph.read_graph"]], "readarray() (in module tryalgo.our_std)": [[10, "tryalgo.our_std.readarray"]], "readint() (in module tryalgo.our_std)": [[10, "tryalgo.our_std.readint"]], "readmatrix() (in module tryalgo.our_std)": [[10, "tryalgo.our_std.readmatrix"]], "readstr() (in module tryalgo.our_std)": [[10, "tryalgo.our_std.readstr"]], "readtab() (in module tryalgo.graph)": [[10, "tryalgo.graph.readtab"]], "readval() (in module tryalgo.graph)": [[10, "tryalgo.graph.readval"]], "rectangles_contains_point() (in module tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.rectangles_contains_point"]], "rectangles_from_grid() (in module tryalgo.rectangles_from_grid)": [[10, "tryalgo.rectangles_from_grid.rectangles_from_grid"]], "rectangles_from_histogram() (in module tryalgo.rectangles_from_histogram)": [[10, "tryalgo.rectangles_from_histogram.rectangles_from_histogram"]], "rectangles_from_points() (in module tryalgo.rectangles_from_points)": [[10, "tryalgo.rectangles_from_points.rectangles_from_points"]], "refine() (tryalgo.partition_refinement.partitionrefinement method)": [[10, "tryalgo.partition_refinement.PartitionRefinement.refine"]], "remove() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.remove"]], "remove() (tryalgo.skip_list.abstractskiplist method)": [[10, "tryalgo.skip_list.AbstractSkipList.remove"]], "replace() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.replace"]], "represent() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.represent"]], "represent() (tryalgo.pc_tree.pc_tree method)": [[10, "tryalgo.PC_tree.PC_tree.represent"]], "represent() (tryalgo.pc_tree.p_node method)": [[10, "tryalgo.PC_tree.P_node.represent"]], "represent_parent() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.represent_parent"]], "restrict() (tryalgo.pc_tree.pc_tree method)": [[10, "tryalgo.PC_tree.PC_tree.restrict"]], "reverse() (in module tryalgo.strongly_connected_components)": [[10, "tryalgo.strongly_connected_components.reverse"]], "roll_hash() (in module tryalgo.rabin_karp)": [[10, "tryalgo.rabin_karp.roll_hash"]], "roman2int() (in module tryalgo.roman_numbers)": [[10, "tryalgo.roman_numbers.roman2int"]], "search() (in module tryalgo.trie)": [[10, "tryalgo.trie.search"]], "set() (tryalgo.range_minimum_query.lazysegmenttree method)": [[10, "tryalgo.range_minimum_query.LazySegmentTree.set"]], "shortest_cycle() (in module tryalgo.shortest_cycle)": [[10, "tryalgo.shortest_cycle.shortest_cycle"]], "signal_full() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.signal_full"]], "signal_full() (tryalgo.pc_tree.node method)": [[10, "tryalgo.PC_tree.Node.signal_full"]], "signal_full() (tryalgo.pc_tree.p_node method)": [[10, "tryalgo.PC_tree.P_node.signal_full"]], "solve() (in module tryalgo.laser_mirrors)": [[10, "tryalgo.laser_mirrors.solve"]], "solve_word_addition() (in module tryalgo.next_permutation)": [[10, "tryalgo.next_permutation.solve_word_addition"]], "sort_class() (in module tryalgo.suffix_array)": [[10, "tryalgo.suffix_array.sort_class"]], "sort_cyclic_shifts() (in module tryalgo.suffix_array)": [[10, "tryalgo.suffix_array.sort_cyclic_shifts"]], "spell_check() (in module tryalgo.trie)": [[10, "tryalgo.trie.spell_check"]], "split() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.split"]], "split() (tryalgo.pc_tree.p_node method)": [[10, "tryalgo.PC_tree.P_node.split"]], "sub_poly() (in module tryalgo.karatsuba)": [[10, "tryalgo.karatsuba.sub_poly"]], "subset_sum() (in module tryalgo.subsetsum)": [[10, "tryalgo.subsetsum.subset_sum"]], "subset_sum() (in module tryalgo.subsetsum_divide)": [[10, "tryalgo.subsetsum_divide.subset_sum"]], "subset_sum2() (in module tryalgo.subsetsum_divide)": [[10, "tryalgo.subsetsum_divide.subset_sum2"]], "successor() (tryalgo.sequence.sequence method)": [[10, "tryalgo.Sequence.Sequence.successor"]], "sudoku() (in module tryalgo.sudoku)": [[10, "tryalgo.sudoku.sudoku"]], "suffix_array() (in module tryalgo.suffix_array)": [[10, "tryalgo.suffix_array.suffix_array"]], "sum() (tryalgo.range_minimum_query.lazysegmenttree method)": [[10, "tryalgo.range_minimum_query.LazySegmentTree.sum"]], "tarjan() (in module tryalgo.strongly_connected_components)": [[10, "tryalgo.strongly_connected_components.tarjan"]], "tarjan_recursif() (in module tryalgo.strongly_connected_components)": [[10, "tryalgo.strongly_connected_components.tarjan_recursif"]], "ternary_search() (in module tryalgo.binary_search)": [[10, "tryalgo.binary_search.ternary_search"]], "three_partition() (in module tryalgo.three_partition)": [[10, "tryalgo.three_partition.three_partition"]], "to_signal() (tryalgo.pc_tree.c_node method)": [[10, "tryalgo.PC_tree.C_node.to_signal"]], "to_signal() (tryalgo.pc_tree.leaf method)": [[10, "tryalgo.PC_tree.Leaf.to_signal"]], "to_signal() (tryalgo.pc_tree.p_node method)": [[10, "tryalgo.PC_tree.P_node.to_signal"]], "tolist() (tryalgo.partition_refinement.partitionrefinement method)": [[10, "tryalgo.partition_refinement.PartitionRefinement.tolist"]], "topological_order() (in module tryalgo.topological_order)": [[10, "tryalgo.topological_order.topological_order"]], "topological_order_dfs() (in module tryalgo.topological_order)": [[10, "tryalgo.topological_order.topological_order_dfs"]], "tortoise_hare() (in module tryalgo.tortoise_hare)": [[10, "tryalgo.tortoise_hare.tortoise_hare"]], "tree_adj_to_prec() (in module tryalgo.graph)": [[10, "tryalgo.graph.tree_adj_to_prec"]], "tree_prec_to_adj() (in module tryalgo.graph)": [[10, "tryalgo.graph.tree_prec_to_adj"]], "tryalgo": [[10, "module-tryalgo"]], "tryalgo.pc_tree": [[10, "module-tryalgo.PC_tree"]], "tryalgo.sequence": [[10, "module-tryalgo.Sequence"]], "tryalgo.a_star": [[10, "module-tryalgo.a_star"]], "tryalgo.anagrams": [[10, "module-tryalgo.anagrams"]], "tryalgo.arithm": [[10, "module-tryalgo.arithm"]], "tryalgo.arithm_expr_eval": [[10, "module-tryalgo.arithm_expr_eval"]], "tryalgo.arithm_expr_target": [[10, "module-tryalgo.arithm_expr_target"]], "tryalgo.bellman_ford": [[10, "module-tryalgo.bellman_ford"]], "tryalgo.bfs": [[10, "module-tryalgo.bfs"]], "tryalgo.biconnected_components": [[10, "module-tryalgo.biconnected_components"]], "tryalgo.binary_search": [[10, "module-tryalgo.binary_search"]], "tryalgo.bipartite_matching": [[10, "module-tryalgo.bipartite_matching"]], "tryalgo.bipartite_vertex_cover": [[10, "module-tryalgo.bipartite_vertex_cover"]], "tryalgo.closest_points": [[10, "module-tryalgo.closest_points"]], "tryalgo.closest_values": [[10, "module-tryalgo.closest_values"]], "tryalgo.convex_hull": [[10, "module-tryalgo.convex_hull"]], "tryalgo.dancing_links": [[10, "module-tryalgo.dancing_links"]], "tryalgo.dfs": [[10, "module-tryalgo.dfs"]], "tryalgo.dijkstra": [[10, "module-tryalgo.dijkstra"]], "tryalgo.dilworth": [[10, "module-tryalgo.dilworth"]], "tryalgo.dinic": [[10, "module-tryalgo.dinic"]], "tryalgo.dist_grid": [[10, "module-tryalgo.dist_grid"]], "tryalgo.dyn_prog_tricks": [[10, "module-tryalgo.dyn_prog_tricks"]], "tryalgo.edmonds_karp": [[10, "module-tryalgo.edmonds_karp"]], "tryalgo.eulerian_tour": [[10, "module-tryalgo.eulerian_tour"]], "tryalgo.fast_exponentiation": [[10, "module-tryalgo.fast_exponentiation"]], "tryalgo.fenwick": [[10, "module-tryalgo.fenwick"]], "tryalgo.fft": [[10, "module-tryalgo.fft"]], "tryalgo.floyd_warshall": [[10, "module-tryalgo.floyd_warshall"]], "tryalgo.ford_fulkerson": [[10, "module-tryalgo.ford_fulkerson"]], "tryalgo.freivalds": [[10, "module-tryalgo.freivalds"]], "tryalgo.gale_shapley": [[10, "module-tryalgo.gale_shapley"]], "tryalgo.gauss_jordan": [[10, "module-tryalgo.gauss_jordan"]], "tryalgo.graph": [[10, "module-tryalgo.graph"]], "tryalgo.graph01": [[10, "module-tryalgo.graph01"]], "tryalgo.hamiltonian_cycle": [[10, "module-tryalgo.hamiltonian_cycle"]], "tryalgo.horn_sat": [[10, "module-tryalgo.horn_sat"]], "tryalgo.huffman": [[10, "module-tryalgo.huffman"]], "tryalgo.interval_cover": [[10, "module-tryalgo.interval_cover"]], "tryalgo.interval_tree": [[10, "module-tryalgo.interval_tree"]], "tryalgo.intervals_union": [[10, "module-tryalgo.intervals_union"]], "tryalgo.karatsuba": [[10, "module-tryalgo.karatsuba"]], "tryalgo.knapsack": [[10, "module-tryalgo.knapsack"]], "tryalgo.knuth_morris_pratt": [[10, "module-tryalgo.knuth_morris_pratt"]], "tryalgo.kruskal": [[10, "module-tryalgo.kruskal"]], "tryalgo.kuhn_munkres": [[10, "module-tryalgo.kuhn_munkres"]], "tryalgo.kuhn_munkres_n4": [[10, "module-tryalgo.kuhn_munkres_n4"]], "tryalgo.laser_mirrors": [[10, "module-tryalgo.laser_mirrors"]], "tryalgo.left_right_inversions": [[10, "module-tryalgo.left_right_inversions"]], "tryalgo.levenshtein": [[10, "module-tryalgo.levenshtein"]], "tryalgo.longest_common_subsequence": [[10, "module-tryalgo.longest_common_subsequence"]], "tryalgo.longest_increasing_subsequence": [[10, "module-tryalgo.longest_increasing_subsequence"]], "tryalgo.lowest_common_ancestor": [[10, "module-tryalgo.lowest_common_ancestor"]], "tryalgo.majority": [[10, "module-tryalgo.majority"]], "tryalgo.manacher": [[10, "module-tryalgo.manacher"]], "tryalgo.matrix_chain_mult": [[10, "module-tryalgo.matrix_chain_mult"]], "tryalgo.max_interval_intersec": [[10, "module-tryalgo.max_interval_intersec"]], "tryalgo.merge_ordered_lists": [[10, "module-tryalgo.merge_ordered_lists"]], "tryalgo.min_mean_cycle": [[10, "module-tryalgo.min_mean_cycle"]], "tryalgo.next_permutation": [[10, "module-tryalgo.next_permutation"]], "tryalgo.our_heap": [[10, "module-tryalgo.our_heap"]], "tryalgo.our_queue": [[10, "module-tryalgo.our_queue"]], "tryalgo.our_std": [[10, "module-tryalgo.our_std"]], "tryalgo.pareto": [[10, "module-tryalgo.pareto"]], "tryalgo.partition_refinement": [[10, "module-tryalgo.partition_refinement"]], "tryalgo.permutation_rank": [[10, "module-tryalgo.permutation_rank"]], "tryalgo.polygon": [[10, "module-tryalgo.polygon"]], "tryalgo.predictive_text": [[10, "module-tryalgo.predictive_text"]], "tryalgo.primes": [[10, "module-tryalgo.primes"]], "tryalgo.rabin_karp": [[10, "module-tryalgo.rabin_karp"]], "tryalgo.range_minimum_query": [[10, "module-tryalgo.range_minimum_query"]], "tryalgo.rectangles_from_grid": [[10, "module-tryalgo.rectangles_from_grid"]], "tryalgo.rectangles_from_histogram": [[10, "module-tryalgo.rectangles_from_histogram"]], "tryalgo.rectangles_from_points": [[10, "module-tryalgo.rectangles_from_points"]], "tryalgo.roman_numbers": [[10, "module-tryalgo.roman_numbers"]], "tryalgo.scalar": [[10, "module-tryalgo.scalar"]], "tryalgo.shortest_cycle": [[10, "module-tryalgo.shortest_cycle"]], "tryalgo.skip_list": [[10, "module-tryalgo.skip_list"]], "tryalgo.strongly_connected_components": [[10, "module-tryalgo.strongly_connected_components"]], "tryalgo.subsetsum": [[10, "module-tryalgo.subsetsum"]], "tryalgo.subsetsum_divide": [[10, "module-tryalgo.subsetsum_divide"]], "tryalgo.sudoku": [[10, "module-tryalgo.sudoku"]], "tryalgo.suffix_array": [[10, "module-tryalgo.suffix_array"]], "tryalgo.three_partition": [[10, "module-tryalgo.three_partition"]], "tryalgo.topological_order": [[10, "module-tryalgo.topological_order"]], "tryalgo.tortoise_hare": [[10, "module-tryalgo.tortoise_hare"]], "tryalgo.trie": [[10, "module-tryalgo.trie"]], "tryalgo.two_sat": [[10, "module-tryalgo.two_sat"]], "tryalgo.union_rectangles": [[10, "module-tryalgo.union_rectangles"]], "tryalgo.windows_k_distinct": [[10, "module-tryalgo.windows_k_distinct"]], "two_sat() (in module tryalgo.two_sat)": [[10, "tryalgo.two_sat.two_sat"]], "union() (tryalgo.kruskal.unionfind method)": [[10, "tryalgo.kruskal.UnionFind.union"]], "union_intervals() (in module tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.union_intervals"]], "union_rectangles() (in module tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.union_rectangles"]], "union_rectangles_fast() (in module tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.union_rectangles_fast"]], "union_rectangles_fastest() (in module tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.union_rectangles_fastest"]], "union_rectangles_naive() (in module tryalgo.union_rectangles)": [[10, "tryalgo.union_rectangles.union_rectangles_naive"]], "up() (tryalgo.our_heap.ourheap method)": [[10, "tryalgo.our_heap.OurHeap.up"]], "update() (tryalgo.fenwick.fenwickmin method)": [[10, "tryalgo.fenwick.FenwickMin.update"]], "update() (tryalgo.our_heap.ourheap method)": [[10, "tryalgo.our_heap.OurHeap.update"]], "val (tryalgo.skip_list.sorteddict.node attribute)": [[10, "tryalgo.skip_list.SortedDict.Node.val"]], "windows_k_distinct() (in module tryalgo.windows_k_distinct)": [[10, "tryalgo.windows_k_distinct.windows_k_distinct"]], "write_cycle() (in module tryalgo.eulerian_tour)": [[10, "tryalgo.eulerian_tour.write_cycle"]], "write_graph() (in module tryalgo.graph)": [[10, "tryalgo.graph.write_graph"]]}})